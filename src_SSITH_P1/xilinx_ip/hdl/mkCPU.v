//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Wed Feb 12 22:11:45 EST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// hart0_server_reset_response_get  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1 reg
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1 reg
// imem_master_arvalid            O     1 reg
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1 reg
// dmem_master_awvalid            O     1 reg
// dmem_master_awid               O     4 reg
// dmem_master_awaddr             O    64 reg
// dmem_master_awlen              O     8 reg
// dmem_master_awsize             O     3 reg
// dmem_master_awburst            O     2 reg
// dmem_master_awlock             O     1 reg
// dmem_master_awcache            O     4 reg
// dmem_master_awprot             O     3 reg
// dmem_master_awqos              O     4 reg
// dmem_master_awregion           O     4 reg
// dmem_master_wvalid             O     1 reg
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_wlast              O     1 reg
// dmem_master_bready             O     1 reg
// dmem_master_arvalid            O     1 reg
// dmem_master_arid               O     4 reg
// dmem_master_araddr             O    64 reg
// dmem_master_arlen              O     8 reg
// dmem_master_arsize             O     3 reg
// dmem_master_arburst            O     2 reg
// dmem_master_arlock             O     1 reg
// dmem_master_arcache            O     4 reg
// dmem_master_arprot             O     3 reg
// dmem_master_arqos              O     4 reg
// dmem_master_arregion           O     4 reg
// dmem_master_rready             O     1 reg
// RDY_set_verbosity              O     1 const
// trace_data_out_get             O   234 reg
// RDY_trace_data_out_get         O     1 reg
// RDY_hart0_server_run_halt_request_put  O     1 reg
// hart0_server_run_halt_response_get  O     1 reg
// RDY_hart0_server_run_halt_response_get  O     1 reg
// RDY_hart0_put_other_req_put    O     1 const
// RDY_hart0_gpr_mem_server_request_put  O     1 reg
// hart0_gpr_mem_server_response_get  O    33 reg
// RDY_hart0_gpr_mem_server_response_get  O     1 reg
// RDY_hart0_csr_mem_server_request_put  O     1 reg
// hart0_csr_mem_server_response_get  O    33 reg
// RDY_hart0_csr_mem_server_response_get  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hart0_server_reset_request_put  I     1 reg
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bid                I     4 reg
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rid                I     4 reg
// dmem_master_rdata              I    64 reg
// dmem_master_rresp              I     2 reg
// dmem_master_rlast              I     1 reg
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4
// set_verbosity_logdelay         I    64 reg
// hart0_server_run_halt_request_put  I     1 reg
// hart0_put_other_req_put        I     4
// hart0_gpr_mem_server_request_put  I    38 reg
// hart0_csr_mem_server_request_put  I    45 reg
// EN_hart0_server_reset_request_put  I     1
// EN_set_verbosity               I     1
// EN_hart0_server_run_halt_request_put  I     1
// EN_hart0_put_other_req_put     I     1
// EN_hart0_gpr_mem_server_request_put  I     1
// EN_hart0_csr_mem_server_request_put  I     1
// EN_hart0_server_reset_response_get  I     1
// EN_trace_data_out_get          I     1
// EN_hart0_server_run_halt_response_get  I     1
// EN_hart0_gpr_mem_server_response_get  I     1
// EN_hart0_csr_mem_server_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     hart0_server_reset_request_put,
	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awid,

	     dmem_master_awaddr,

	     dmem_master_awlen,

	     dmem_master_awsize,

	     dmem_master_awburst,

	     dmem_master_awlock,

	     dmem_master_awcache,

	     dmem_master_awprot,

	     dmem_master_awqos,

	     dmem_master_awregion,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wlast,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_arid,

	     dmem_master_araddr,

	     dmem_master_arlen,

	     dmem_master_arsize,

	     dmem_master_arburst,

	     dmem_master_arlock,

	     dmem_master_arcache,

	     dmem_master_arprot,

	     dmem_master_arqos,

	     dmem_master_arregion,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rid,
	     dmem_master_rdata,
	     dmem_master_rresp,
	     dmem_master_rlast,

	     dmem_master_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity,

	     EN_trace_data_out_get,
	     trace_data_out_get,
	     RDY_trace_data_out_get,

	     hart0_server_run_halt_request_put,
	     EN_hart0_server_run_halt_request_put,
	     RDY_hart0_server_run_halt_request_put,

	     EN_hart0_server_run_halt_response_get,
	     hart0_server_run_halt_response_get,
	     RDY_hart0_server_run_halt_response_get,

	     hart0_put_other_req_put,
	     EN_hart0_put_other_req_put,
	     RDY_hart0_put_other_req_put,

	     hart0_gpr_mem_server_request_put,
	     EN_hart0_gpr_mem_server_request_put,
	     RDY_hart0_gpr_mem_server_request_put,

	     EN_hart0_gpr_mem_server_response_get,
	     hart0_gpr_mem_server_response_get,
	     RDY_hart0_gpr_mem_server_response_get,

	     hart0_csr_mem_server_request_put,
	     EN_hart0_csr_mem_server_request_put,
	     RDY_hart0_csr_mem_server_request_put,

	     EN_hart0_csr_mem_server_response_get,
	     hart0_csr_mem_server_response_get,
	     RDY_hart0_csr_mem_server_response_get);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  hart0_server_reset_request_put;
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // actionvalue method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awid
  output [3 : 0] dmem_master_awid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awlen
  output [7 : 0] dmem_master_awlen;

  // value method dmem_master_m_awsize
  output [2 : 0] dmem_master_awsize;

  // value method dmem_master_m_awburst
  output [1 : 0] dmem_master_awburst;

  // value method dmem_master_m_awlock
  output dmem_master_awlock;

  // value method dmem_master_m_awcache
  output [3 : 0] dmem_master_awcache;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awqos
  output [3 : 0] dmem_master_awqos;

  // value method dmem_master_m_awregion
  output [3 : 0] dmem_master_awregion;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // value method dmem_master_m_wlast
  output dmem_master_wlast;

  // value method dmem_master_m_wuser

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [3 : 0] dmem_master_bid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_arid
  output [3 : 0] dmem_master_arid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arlen
  output [7 : 0] dmem_master_arlen;

  // value method dmem_master_m_arsize
  output [2 : 0] dmem_master_arsize;

  // value method dmem_master_m_arburst
  output [1 : 0] dmem_master_arburst;

  // value method dmem_master_m_arlock
  output dmem_master_arlock;

  // value method dmem_master_m_arcache
  output [3 : 0] dmem_master_arcache;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_arqos
  output [3 : 0] dmem_master_arqos;

  // value method dmem_master_m_arregion
  output [3 : 0] dmem_master_arregion;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [3 : 0] dmem_master_rid;
  input  [63 : 0] dmem_master_rdata;
  input  [1 : 0] dmem_master_rresp;
  input  dmem_master_rlast;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // actionvalue method trace_data_out_get
  input  EN_trace_data_out_get;
  output [233 : 0] trace_data_out_get;
  output RDY_trace_data_out_get;

  // action method hart0_server_run_halt_request_put
  input  hart0_server_run_halt_request_put;
  input  EN_hart0_server_run_halt_request_put;
  output RDY_hart0_server_run_halt_request_put;

  // actionvalue method hart0_server_run_halt_response_get
  input  EN_hart0_server_run_halt_response_get;
  output hart0_server_run_halt_response_get;
  output RDY_hart0_server_run_halt_response_get;

  // action method hart0_put_other_req_put
  input  [3 : 0] hart0_put_other_req_put;
  input  EN_hart0_put_other_req_put;
  output RDY_hart0_put_other_req_put;

  // action method hart0_gpr_mem_server_request_put
  input  [37 : 0] hart0_gpr_mem_server_request_put;
  input  EN_hart0_gpr_mem_server_request_put;
  output RDY_hart0_gpr_mem_server_request_put;

  // actionvalue method hart0_gpr_mem_server_response_get
  input  EN_hart0_gpr_mem_server_response_get;
  output [32 : 0] hart0_gpr_mem_server_response_get;
  output RDY_hart0_gpr_mem_server_response_get;

  // action method hart0_csr_mem_server_request_put
  input  [44 : 0] hart0_csr_mem_server_request_put;
  input  EN_hart0_csr_mem_server_request_put;
  output RDY_hart0_csr_mem_server_request_put;

  // actionvalue method hart0_csr_mem_server_response_get
  input  EN_hart0_csr_mem_server_response_get;
  output [32 : 0] hart0_csr_mem_server_response_get;
  output RDY_hart0_csr_mem_server_response_get;

  // signals for module outputs
  wire [233 : 0] trace_data_out_get;
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata;
  wire [32 : 0] hart0_csr_mem_server_response_get,
		hart0_gpr_mem_server_response_get;
  wire [7 : 0] dmem_master_arlen,
	       dmem_master_awlen,
	       dmem_master_wstrb,
	       imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb;
  wire [3 : 0] dmem_master_arcache,
	       dmem_master_arid,
	       dmem_master_arqos,
	       dmem_master_arregion,
	       dmem_master_awcache,
	       dmem_master_awid,
	       dmem_master_awqos,
	       dmem_master_awregion,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_arsize,
	       dmem_master_awprot,
	       dmem_master_awsize,
	       imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize;
  wire [1 : 0] dmem_master_arburst,
	       dmem_master_awburst,
	       imem_master_arburst,
	       imem_master_awburst;
  wire RDY_hart0_csr_mem_server_request_put,
       RDY_hart0_csr_mem_server_response_get,
       RDY_hart0_gpr_mem_server_request_put,
       RDY_hart0_gpr_mem_server_response_get,
       RDY_hart0_put_other_req_put,
       RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_hart0_server_run_halt_request_put,
       RDY_hart0_server_run_halt_response_get,
       RDY_set_verbosity,
       RDY_trace_data_out_get,
       dmem_master_arlock,
       dmem_master_arvalid,
       dmem_master_awlock,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wlast,
       dmem_master_wvalid,
       hart0_server_reset_response_get,
       hart0_server_run_halt_response_get,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_instr_15_0
  reg [15 : 0] imem_rg_instr_15_0;
  wire [15 : 0] imem_rg_instr_15_0$D_IN;
  wire imem_rg_instr_15_0$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [31 : 0] imem_rg_pc;
  reg [31 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  wire [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [31 : 0] imem_rg_satp;
  wire [31 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register imem_rg_tval
  reg [31 : 0] imem_rg_tval;
  reg [31 : 0] imem_rg_tval$D_IN;
  wire imem_rg_tval$EN;

  // register rg_csr_pc
  reg [31 : 0] rg_csr_pc;
  wire [31 : 0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;

  // register rg_csr_val1
  reg [31 : 0] rg_csr_val1;
  wire [31 : 0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [31 : 0] rg_next_pc;
  reg [31 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_prev_mip
  reg [31 : 0] rg_prev_mip;
  wire [31 : 0] rg_prev_mip$D_IN;
  wire rg_prev_mip$EN;

  // register rg_run_on_reset
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN, rg_run_on_reset$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_step_count
  reg rg_step_count;
  wire rg_step_count$D_IN, rg_step_count$EN;

  // register rg_stop_req
  reg rg_stop_req;
  wire rg_stop_req$D_IN, rg_stop_req$EN;

  // register rg_trap_info
  reg [68 : 0] rg_trap_info;
  reg [68 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // register rg_trap_instr
  reg [31 : 0] rg_trap_instr;
  wire [31 : 0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;

  // register rg_trap_interrupt
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN, rg_trap_interrupt$EN;

  // register rg_trap_trace_data
  reg [233 : 0] rg_trap_trace_data;
  wire [233 : 0] rg_trap_trace_data$D_IN;
  wire rg_trap_trace_data$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [499 : 0] stage2_rg_stage2;
  wire [499 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [135 : 0] stage3_rg_stage3;
  wire [135 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // register tagger_tp_m1_initialized
  reg tagger_tp_m1_initialized;
  wire tagger_tp_m1_initialized$D_IN, tagger_tp_m1_initialized$EN;

  // ports of submodule csr_regfile
  reg [31 : 0] csr_regfile$mav_csr_write_word;
  reg [2 : 0] csr_regfile$write_dcsr_cause_priv_cause;
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [97 : 0] csr_regfile$csr_trap_actions;
  wire [65 : 0] csr_regfile$csr_ret_actions;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr, csr_regfile$read_csr_port2;
  wire [31 : 0] csr_regfile$csr_mip_read,
		csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$mav_csr_write,
		csr_regfile$read_dpc,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$read_tag_ctrl,
		csr_regfile$write_dpc_pc;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [5 : 0] csr_regfile$interrupt_pending;
  wire [4 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$dcsr_break_enters_debug_cur_priv,
	       csr_regfile$interrupt_pending_cur_priv,
	       csr_regfile$write_dcsr_cause_priv_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_write_dcsr_cause_priv,
       csr_regfile$EN_write_dpc,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$dcsr_break_enters_debug,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$read_dcsr_step,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_csr_reqs
  wire [44 : 0] f_csr_reqs$D_IN, f_csr_reqs$D_OUT;
  wire f_csr_reqs$CLR,
       f_csr_reqs$DEQ,
       f_csr_reqs$EMPTY_N,
       f_csr_reqs$ENQ,
       f_csr_reqs$FULL_N;

  // ports of submodule f_csr_rsps
  reg [32 : 0] f_csr_rsps$D_IN;
  wire [32 : 0] f_csr_rsps$D_OUT;
  wire f_csr_rsps$CLR,
       f_csr_rsps$DEQ,
       f_csr_rsps$EMPTY_N,
       f_csr_rsps$ENQ,
       f_csr_rsps$FULL_N;

  // ports of submodule f_gpr_reqs
  wire [37 : 0] f_gpr_reqs$D_IN, f_gpr_reqs$D_OUT;
  wire f_gpr_reqs$CLR,
       f_gpr_reqs$DEQ,
       f_gpr_reqs$EMPTY_N,
       f_gpr_reqs$ENQ,
       f_gpr_reqs$FULL_N;

  // ports of submodule f_gpr_rsps
  reg [32 : 0] f_gpr_rsps$D_IN;
  wire [32 : 0] f_gpr_rsps$D_OUT;
  wire f_gpr_rsps$CLR,
       f_gpr_rsps$DEQ,
       f_gpr_rsps$EMPTY_N,
       f_gpr_rsps$ENQ,
       f_gpr_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_run_halt_reqs
  wire f_run_halt_reqs$CLR,
       f_run_halt_reqs$DEQ,
       f_run_halt_reqs$D_IN,
       f_run_halt_reqs$D_OUT,
       f_run_halt_reqs$EMPTY_N,
       f_run_halt_reqs$ENQ,
       f_run_halt_reqs$FULL_N;

  // ports of submodule f_run_halt_rsps
  wire f_run_halt_rsps$CLR,
       f_run_halt_rsps$DEQ,
       f_run_halt_rsps$D_IN,
       f_run_halt_rsps$D_OUT,
       f_run_halt_rsps$EMPTY_N,
       f_run_halt_rsps$ENQ,
       f_run_halt_rsps$FULL_N;

  // ports of submodule f_trace_data
  reg [233 : 0] f_trace_data$D_IN;
  wire [233 : 0] f_trace_data$D_OUT;
  wire f_trace_data$CLR,
       f_trace_data$DEQ,
       f_trace_data$EMPTY_N,
       f_trace_data$ENQ,
       f_trace_data$FULL_N;

  // ports of submodule gpr_regfile
  reg [63 : 0] gpr_regfile$write_rd_rd_val;
  reg [4 : 0] gpr_regfile$write_rd_rd;
  wire [63 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs1_port2,
		gpr_regfile$read_rs2;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get,
       gpr_regfile$write_rd_write_tag_only;

  // ports of submodule near_mem
  reg [31 : 0] near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata;
  wire [31 : 0] near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$imem_instr,
		near_mem$imem_pc,
		near_mem$imem_req_satp,
		near_mem$pmp_csrs_pmpaddr_write_addr,
		near_mem$pmp_csrs_pmpcfg_write_x;
  wire [7 : 0] near_mem$dmem_master_arlen,
	       near_mem$dmem_master_awlen,
	       near_mem$dmem_master_wstrb,
	       near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [4 : 0] near_mem$dmem_exc_code, near_mem$imem_exc_code;
  wire [3 : 0] near_mem$dmem_master_arcache,
	       near_mem$dmem_master_arid,
	       near_mem$dmem_master_arqos,
	       near_mem$dmem_master_arregion,
	       near_mem$dmem_master_awcache,
	       near_mem$dmem_master_awid,
	       near_mem$dmem_master_awqos,
	       near_mem$dmem_master_awregion,
	       near_mem$dmem_master_bid,
	       near_mem$dmem_master_rid,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arid,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awid,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$imem_master_bid,
	       near_mem$imem_master_rid,
	       near_mem$pmp_csrs_pmpaddr_read_j,
	       near_mem$pmp_csrs_pmpaddr_write_j;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_arsize,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_master_awsize,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3;
  wire [1 : 0] near_mem$dmem_master_arburst,
	       near_mem$dmem_master_awburst,
	       near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$imem_req_priv,
	       near_mem$pmp_csrs_pmpcfg_read_j,
	       near_mem$pmp_csrs_pmpcfg_write_j;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_pmp_csrs_pmpaddr_write,
       near_mem$EN_pmp_csrs_pmpcfg_write,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arlock,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awlock,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rlast,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wlast,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_pc_reset_value;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_mbox
  wire [31 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_assert_fail,
       CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_BREAK_cache_flush_finish,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_debug_csr_access_busy,
       CAN_FIRE_RL_rl_debug_gpr_access_busy,
       CAN_FIRE_RL_rl_debug_halt,
       CAN_FIRE_RL_rl_debug_halt_redundant,
       CAN_FIRE_RL_rl_debug_read_csr,
       CAN_FIRE_RL_rl_debug_read_gpr,
       CAN_FIRE_RL_rl_debug_run,
       CAN_FIRE_RL_rl_debug_run_redundant,
       CAN_FIRE_RL_rl_debug_write_csr,
       CAN_FIRE_RL_rl_debug_write_gpr,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_Debug_Module,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_CSRR_W_2,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_mip_cmd,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_stop,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_RL_tagger_rl_tag_active,
       CAN_FIRE_RL_tagger_tp_m1_rl_startup,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_hart0_csr_mem_server_request_put,
       CAN_FIRE_hart0_csr_mem_server_response_get,
       CAN_FIRE_hart0_gpr_mem_server_request_put,
       CAN_FIRE_hart0_gpr_mem_server_response_get,
       CAN_FIRE_hart0_put_other_req_put,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_hart0_server_run_halt_request_put,
       CAN_FIRE_hart0_server_run_halt_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_trace_data_out_get,
       WILL_FIRE_RL_imem_rl_assert_fail,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_BREAK_cache_flush_finish,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_debug_csr_access_busy,
       WILL_FIRE_RL_rl_debug_gpr_access_busy,
       WILL_FIRE_RL_rl_debug_halt,
       WILL_FIRE_RL_rl_debug_halt_redundant,
       WILL_FIRE_RL_rl_debug_read_csr,
       WILL_FIRE_RL_rl_debug_read_gpr,
       WILL_FIRE_RL_rl_debug_run,
       WILL_FIRE_RL_rl_debug_run_redundant,
       WILL_FIRE_RL_rl_debug_write_csr,
       WILL_FIRE_RL_rl_debug_write_gpr,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_Debug_Module,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_CSRR_W_2,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_mip_cmd,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_stop,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_RL_tagger_rl_tag_active,
       WILL_FIRE_RL_tagger_tp_m1_rl_startup,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_hart0_csr_mem_server_request_put,
       WILL_FIRE_hart0_csr_mem_server_response_get,
       WILL_FIRE_hart0_gpr_mem_server_request_put,
       WILL_FIRE_hart0_gpr_mem_server_response_get,
       WILL_FIRE_hart0_put_other_req_put,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_hart0_server_run_halt_request_put,
       WILL_FIRE_hart0_server_run_halt_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_trace_data_out_get;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [233 : 0] MUX_f_trace_data$enq_1__VAL_1,
		 MUX_f_trace_data$enq_1__VAL_2,
		 MUX_f_trace_data$enq_1__VAL_3,
		 MUX_f_trace_data$enq_1__VAL_4,
		 MUX_f_trace_data$enq_1__VAL_6,
		 MUX_f_trace_data$enq_1__VAL_7,
		 MUX_f_trace_data$enq_1__VAL_8;
  wire [68 : 0] MUX_rg_trap_info$write_1__VAL_1,
		MUX_rg_trap_info$write_1__VAL_2,
		MUX_rg_trap_info$write_1__VAL_3,
		MUX_rg_trap_info$write_1__VAL_4;
  wire [63 : 0] MUX_gpr_regfile$write_rd_2__VAL_2,
		MUX_gpr_regfile$write_rd_2__VAL_4;
  wire [32 : 0] MUX_f_csr_rsps$enq_1__VAL_3, MUX_f_gpr_rsps$enq_1__VAL_3;
  wire [31 : 0] MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_2,
		MUX_near_mem$imem_req_2__VAL_5,
		MUX_near_mem$imem_req_2__VAL_7;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3;
  wire [2 : 0] MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_csr_regfile$mav_csr_write_1__SEL_2,
       MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1,
       MUX_csr_regfile$write_dpc_1__SEL_2,
       MUX_f_run_halt_rsps$enq_1__SEL_1,
       MUX_f_trace_data$enq_1__SEL_1,
       MUX_f_trace_data$enq_1__SEL_3,
       MUX_f_trace_data$enq_1__SEL_4,
       MUX_gpr_regfile$write_rd_1__SEL_1,
       MUX_gpr_regfile$write_rd_3__VAL_1,
       MUX_imem_rg_f3$write_1__SEL_1,
       MUX_imem_rg_f3$write_1__SEL_2,
       MUX_imem_rg_f3$write_1__SEL_3,
       MUX_imem_rg_mstatus_MXR$write_1__SEL_4,
       MUX_imem_rg_pc$write_1__SEL_4,
       MUX_near_mem$imem_req_1__SEL_6,
       MUX_rg_next_pc$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_9,
       MUX_rg_step_count$write_1__PSEL_1,
       MUX_rg_step_count$write_1__SEL_3,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_instr$write_1__SEL_1,
       MUX_rg_trap_interrupt$write_1__SEL_1,
       MUX_rg_trap_trace_data$write_1__SEL_1,
       MUX_stage1_rg_full$write_1__VAL_9,
       MUX_stage2_rg_full$write_1__VAL_3;

  // remaining internal signals
  reg [63 : 0] x_out_data_to_stage2_trace_data_word3__h23058;
  reg [31 : 0] CASE_stage2_rg_stage2_BITS_433_TO_431_0_stage2_ETC__q32,
	       CASE_stage2_rg_stage2_BITS_433_TO_431_1_near_m_ETC__q22,
	       CASE_stage2_rg_stage2_BITS_433_TO_431_1_output_ETC__q24,
	       CASE_theResult__950_BITS_6_TO_0_0b10011_rd_val_ETC__q28,
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1199,
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1292,
	       _theResult_____1_fst__h16437,
	       rs1_val__h27594,
	       x__h24490,
	       x_out_bypass_rd_val_data__h7689,
	       x_out_data_to_stage2_addr__h13418,
	       x_out_data_to_stage2_trace_data_pc__h23052,
	       x_out_data_to_stage2_trace_data_word1__h23056,
	       x_out_data_to_stage2_val1__h13420,
	       x_out_data_to_stage3_rd_val__h7233;
  reg [29 : 0] CASE_stage2_rg_stage2_BITS_433_TO_431_1_IF_NOT_ETC__q25,
	       CASE_stage2_rg_stage2_BITS_433_TO_431_1_IF_sta_ETC__q23,
	       CASE_theResult__950_BITS_6_TO_0_0b10011_IF_IF__ETC__q27,
	       CASE_theResult__950_BITS_6_TO_0_0b1100011_0_0b_ETC__q29,
	       CASE_theResult__950_BITS_6_TO_0_0b1100011_0_0b_ETC__q30,
	       CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_IF_ETC__q31,
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1531;
  reg [14 : 0] x_out_bypass_rd_val_tag_ptr_neg_size__h7745,
	       x_out_bypass_rd_val_tag_ptr_pos_size__h7744;
  reg [4 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q6,
	      CASE_theResult__950_BITS_31_TO_20_0b0_CASE_rg__ETC__q7,
	      _theResult_____2_snd_fst_exc_code__h16958,
	      _theResult_____3_snd_fst_exc_code__h16943,
	      alu_outputs_exc_code__h14174,
	      x_out_bypass_rd__h7611,
	      x_out_data_to_stage2_trace_data_rd__h23055,
	      x_out_data_to_stage3_rd__h7232;
  reg [3 : 0] CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q18,
	      CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q20,
	      CASE_theResult__950_BITS_14_TO_12_0b0_5_0b1_6_12__q19,
	      CASE_theResult__950_BITS_14_TO_12_0b0_IF_theRe_ETC__q21,
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1008,
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1013,
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002,
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d986,
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998,
	      IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761;
  reg [2 : 0] CASE_theResult__950_BITS_6_TO_0_0b11_1_0b10011_ETC__q8,
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q1,
	      CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q2;
  reg CASE_theResult__950_BITS_6_TO_0_0b10011_IF_NOT_ETC__q11,
      CASE_theResult__950_BITS_6_TO_0_0b10011_IF_NOT_ETC__q17,
      CASE_theResult__950_BITS_6_TO_0_0b10011_NOT_IF_ETC__q12,
      CASE_theResult__950_BITS_6_TO_0_0b10011_NOT_IF_ETC__q14,
      CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_ne_ETC__q10,
      CASE_theResult__950_BITS_6_TO_0_0b11_NOT_IF_NO_ETC__q26,
      CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q13,
      CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9,
      CASE_theResult__950_BITS_6_TO_0_0b11_theResult_ETC__q16,
      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1347,
      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1371,
      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1374,
      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d872,
      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d876,
      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d886,
      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949,
      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971,
      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1593,
      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d776,
      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d862,
      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927,
      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d936,
      IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d159,
      IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d168;
  wire [127 : 0] csr_regfile_read_csr_mcycle__4_MINUS_rg_start__ETC___d2166;
  wire [63 : 0] IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d1453,
		IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d236,
		_theResult____h33240,
		alu_outputs___1_trace_data_word3__h22933,
		alu_outputs___1_trace_data_word3__h22952,
		cpi__h33242,
		cpifrac__h33243,
		delta_CPI_cycles__h33238,
		delta_CPI_instrs___1__h33275,
		delta_CPI_instrs__h33239,
		x__h33241,
		x_word3__h26174,
		x_word3__h27987;
  wire [36 : 0] IF_near_mem_imem_exc__44_THEN_near_mem_imem_ex_ETC___d1995;
  wire [31 : 0] IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1200,
		IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1778,
		IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d906,
		IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1134,
		IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1752,
		IF_csr_regfile_read_csr_rg_trap_instr_025_BITS_ETC___d2079,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d482,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d484,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d486,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d487,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d489,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d490,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d491,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d493,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d494,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d495,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d497,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d498,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d499,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d500,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d501,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d502,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d503,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d504,
		IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d505,
		NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1746,
		_theResult_____1_fst__h16427,
		_theResult_____1_fst__h16476,
		_theResult_____1_fst_val2__h24432,
		_theResult_____2_snd_fst_tval__h16959,
		_theResult____h4950,
		_theResult___fst__h17472,
		_theResult___fst__h8073,
		_theResult___fst__h8101,
		alu_outputs___1_addr__h13561,
		alu_outputs___1_addr__h13591,
		alu_outputs___1_addr__h13625,
		alu_outputs___1_val1__h14128,
		alu_outputs___1_val1__h14154,
		branch_target__h13534,
		data_to_stage2_addr__h13406,
		eaddr__h13838,
		eaddr__h13863,
		fall_through_pc__h13341,
		instr___1__h7906,
		instr__h10165,
		instr__h10503,
		instr__h10687,
		instr__h10816,
		instr__h11253,
		instr__h11425,
		instr__h11598,
		instr__h11791,
		instr__h11984,
		instr__h12101,
		instr__h12279,
		instr__h12398,
		instr__h12493,
		instr__h12629,
		instr__h12765,
		instr__h12901,
		instr__h13239,
		instr__h4948,
		instr__h8173,
		instr__h8318,
		instr__h8510,
		instr__h8705,
		instr__h8934,
		instr__h9277,
		instr__h9667,
		instr__h9783,
		instr__h9848,
		instr_out___1__h8043,
		instr_out___1__h8075,
		instr_out___1__h8103,
		next_pc___1__h17115,
		next_pc__h17113,
		output_stage2___1_bypass_rd_val_data__h7680,
		rd_val___1__h17549,
		rd_val___1__h17566,
		rd_val___1__h17569,
		rd_val___1__h17575,
		rd_val___1__h17581,
		rd_val___1__h17584,
		rd_val__h13725,
		rd_val__h13770,
		rd_val__h13792,
		rd_val__h13812,
		rd_val__h17440,
		rd_val__h17502,
		rd_val__h17525,
		rs1_val__h26763,
		rs2_val__h13530,
		rs2_val_local__h13764,
		val_data__h14942,
		val_data__h14973,
		val_data__h14975,
		value__h17003,
		x_3__h15373,
		x_3__h15657,
		x__h15488,
		x__h21108,
		x__h21281,
		x__h21679,
		x__h26339,
		x__h28034,
		x__h28042,
		x_out_data_to_stage2_instr__h13415,
		x_out_data_to_stage2_trace_data_instr__h23054,
		x_out_data_to_stage2_val2__h13421,
		x_out_next_pc__h13378,
		y__h15441,
		y__h15489,
		y__h21234,
		y__h21282,
		y__h27877;
  wire [30 : 0] NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1563;
  wire [29 : 0] IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1547,
		IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1688,
		IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1707,
		IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1723,
		IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1737,
		IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1556,
		IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1741,
		IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1744,
		IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535,
		IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693,
		IF_NOT_0_CONCAT_IF_NOT_near_mem_imem_pc__0_EQ__ETC___d1553,
		IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1686,
		IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1698,
		IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1705,
		IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1715,
		IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1729,
		IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1735,
		IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1555,
		IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1709,
		IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1739,
		IF_NOT_NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_im_ETC___d1679,
		IF_NOT_NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_im_ETC___d1721,
		IF_NOT_NEG_SEXT_IF_NOT_near_mem_imem_pc__0_EQ__ETC___d1540,
		IF_NOT_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1545,
		IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d231,
		IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1534,
		IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1692,
		IF_stage2_rg_stage2_15_BITS_448_TO_446_439_EQ__ETC___d1449;
  wire [20 : 0] SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333,
		theResult__950_BIT_31_CONCAT_theResult__950_BI_ETC__q5;
  wire [19 : 0] imm20__h10555;
  wire [14 : 0] output_stage2___1_bypass_rd_val_tag_ptr_neg_size__h7731,
		output_stage2___1_bypass_rd_val_tag_ptr_pos_size__h7730,
		rs1_val_bypassed_tag_ptr_neg_size__h15339,
		rs1_val_bypassed_tag_ptr_pos_size__h15338,
		rs2_val_bypassed_tag_ptr_neg_size__h20982,
		rs2_val_bypassed_tag_ptr_pos_size__h20981,
		val_tag_ptr_neg_size__h15331,
		val_tag_ptr_neg_size__h15335,
		val_tag_ptr_neg_size__h20974,
		val_tag_ptr_neg_size__h20978,
		val_tag_ptr_pos_size__h15330,
		val_tag_ptr_pos_size__h15334,
		val_tag_ptr_pos_size__h20973,
		val_tag_ptr_pos_size__h20977,
		x_14_ptr_neg_size__h15533,
		x_14_ptr_neg_size__h21153,
		x_14_ptr_neg_size__h21328,
		x_14_ptr_neg_size__h21552,
		x_14_ptr_neg_size__h21726,
		x_14_ptr_pos_size__h15532,
		x_14_ptr_pos_size__h21152,
		x_14_ptr_pos_size__h21327,
		x_14_ptr_pos_size__h21551,
		x_14_ptr_pos_size__h21725,
		x_8_ptr_neg_size__h15471,
		x_8_ptr_neg_size__h15741,
		x_8_ptr_neg_size__h21091,
		x_8_ptr_neg_size__h21264,
		x_8_ptr_neg_size__h21490,
		x_8_ptr_neg_size__h21662,
		x_8_ptr_pos_size__h15470,
		x_8_ptr_pos_size__h15740,
		x_8_ptr_pos_size__h21090,
		x_8_ptr_pos_size__h21263,
		x_8_ptr_pos_size__h21489,
		x_8_ptr_pos_size__h21661;
  wire [12 : 0] SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362,
		theResult__950_BIT_31_CONCAT_theResult__950_BI_ETC__q4;
  wire [11 : 0] imm12__h10427,
		imm12__h11051,
		imm12__h11266,
		imm12__h11462,
		imm12__h11807,
		imm12__h8174,
		imm12__h8511,
		offset__h8881,
		theResult__950_BITS_31_TO_20__q3,
		theResult__950_BITS_31_TO_25_CONCAT_theResult__ETC__q15;
  wire [9 : 0] nzimm10__h11049, nzimm10__h11264;
  wire [8 : 0] offset__h9792;
  wire [7 : 0] offset__h7944;
  wire [6 : 0] offset__h8453;
  wire [5 : 0] imm6__h10425;
  wire [4 : 0] _theResult_____1_snd_fst_exc_code__h16952,
	       _theResult_____1_snd_fst_exc_code__h16955,
	       _theResult_____2_snd_fst_exc_code__h16946,
	       _theResult_____2_snd_fst_exc_code__h16949,
	       _theResult_____3_snd_fst_exc_code__h16937,
	       _theResult_____3_snd_fst_exc_code__h16940,
	       _theResult_____4_snd_fst_exc_code__h16928,
	       _theResult_____4_snd_fst_exc_code__h16931,
	       _theResult_____4_snd_fst_exc_code__h16934,
	       alu_outputs___1_exc_code__h14123,
	       offset_BITS_4_TO_0___h8442,
	       offset_BITS_4_TO_0___h8873,
	       rd__h8513,
	       rs1__h8512,
	       shamt__h13719,
	       td1_rd__h28910,
	       x_exc_code__h32989,
	       x_out_data_to_stage2_rd__h13417,
	       x_out_trap_info_exc_code__h16962,
	       x_rd__h26171;
  wire [3 : 0] IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1005,
	       IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d978,
	       IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015,
	       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1004,
	       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1007,
	       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1010,
	       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1012,
	       IF_rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_E_ETC___d984,
	       cur_verbosity__h3467;
  wire [1 : 0] IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d203,
	       IF_near_mem_dmem_valid__36_THEN_IF_near_mem_dm_ETC___d139,
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145,
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207,
	       IF_stage2_rg_stage2_15_BITS_430_TO_426_75_EQ_0_ETC___d202,
	       IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_3_ETC___d142;
  wire IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1393,
       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1405,
       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1611,
       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1637,
       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1661,
       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1865,
       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1866,
       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1870,
       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d942,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1526,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1586,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1595,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1607,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1624,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1633,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1642,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1653,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1657,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1666,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1669,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d602,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d674,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d748,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d779,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d835,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d865,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d891,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d916,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d918,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d920,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d959,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966,
       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968,
       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500,
       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1511,
       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567,
       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1572,
       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1577,
       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1583,
       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589,
       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d620,
       IF_NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1650,
       IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1640,
       IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1664,
       IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d223,
       IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d227,
       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1585,
       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d669,
       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d704,
       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d772,
       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d866,
       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1499,
       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1510,
       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1566,
       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1571,
       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1576,
       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1582,
       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d588,
       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d619,
       IF_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg__ETC___d1516,
       IF_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg__ETC___d660,
       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1346,
       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1373,
       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d884,
       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d885,
       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d941,
       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d944,
       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d946,
       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d970,
       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1498,
       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1507,
       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511,
       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517,
       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d582,
       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d614,
       IF_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11__ETC___d101,
       IF_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11__ETC___d105,
       NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1603,
       NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1646,
       NEG_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d640,
       NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1522,
       NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1579,
       NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d795,
       NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d858,
       NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d875,
       NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1833,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1856,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1885,
       NOT_near_mem_imem_exc__44_53_AND_IF_IF_IF_NOT__ETC___d1087,
       NOT_near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_ETC___d2179,
       NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d250,
       NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d255,
       NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1403,
       NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1415,
       NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1826,
       NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1828,
       NOT_rg_cur_priv_5_EQ_0b11_22_10_AND_NOT_rg_cur_ETC___d825,
       NOT_rg_cur_priv_5_EQ_0b11_22_10_AND_NOT_rg_cur_ETC___d826,
       NOT_rg_stop_req_379_421_AND_NOT_rg_step_count__ETC___d1428,
       NOT_rg_stop_req_379_421_AND_NOT_rg_step_count__ETC___d1434,
       NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1417,
       NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1831,
       NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839,
       NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1864,
       NOT_stage1_rg_full_39_40_OR_near_mem_imem_vali_ETC___d1998,
       NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536,
       NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541,
       SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc__ETC___d656,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1604,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1608,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1625,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1634,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1643,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1647,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1654,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1658,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d642,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d658,
       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d666,
       _0_CONCAT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d664,
       _0_OR_0_OR_near_mem_imem_exc__44_OR_IF_IF_IF_NO_ETC___d1854,
       _0_OR_0_OR_near_mem_imem_exc__44_OR_IF_IF_IF_NO_ETC___d1858,
       _0_OR_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d894,
       csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355,
       csr_regfile_read_misa__2_BIT_2_57_AND_IF_near__ETC___d347,
       csr_regfile_read_misa__2_BIT_2_57_AND_IF_near__ETC___d353,
       csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676,
       near_mem_RDY_server_reset_request_put__297_AND_ETC___d1309,
       near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1248,
       near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402,
       near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1488,
       near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1490,
       near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1496,
       near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1835,
       near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1838,
       near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1883,
       near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14,
       near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d528,
       near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530,
       near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5___d242,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1018,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1022,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1026,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1030,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1034,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1038,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1042,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1046,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1050,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1054,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1058,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1062,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1088,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1093,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1097,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1101,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1105,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1115,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1213,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1216,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1219,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1222,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1225,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1228,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1231,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1234,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1237,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1240,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1243,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1246,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1249,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1344,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1349,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1377,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1494,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1872,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951,
       near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973,
       rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_EQ_0_ETC___d739,
       rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_EQ_0_ETC___d740,
       rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892,
       rg_state_8_EQ_4_342_AND_stage3_rg_full_0_OR_NO_ETC___d1420,
       rg_stop_req_379_OR_rg_step_count_380_381_AND_s_ETC___d2158,
       rg_stop_req_379_OR_rg_step_count_380_381_AND_s_ETC___d2161,
       stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526,
       stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1352,
       stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1383,
       stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1389,
       stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1407,
       stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1876,
       stage2_f_reset_rsps_i_notEmpty__320_AND_stage3_ETC___d1329,
       stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509,
       stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515,
       stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d513,
       stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d519;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // actionvalue method hart0_server_reset_response_get
  assign hart0_server_reset_response_get = f_reset_rsps$D_OUT ;
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awid
  assign dmem_master_awid = near_mem$dmem_master_awid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awlen
  assign dmem_master_awlen = near_mem$dmem_master_awlen ;

  // value method dmem_master_m_awsize
  assign dmem_master_awsize = near_mem$dmem_master_awsize ;

  // value method dmem_master_m_awburst
  assign dmem_master_awburst = near_mem$dmem_master_awburst ;

  // value method dmem_master_m_awlock
  assign dmem_master_awlock = near_mem$dmem_master_awlock ;

  // value method dmem_master_m_awcache
  assign dmem_master_awcache = near_mem$dmem_master_awcache ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // value method dmem_master_m_awqos
  assign dmem_master_awqos = near_mem$dmem_master_awqos ;

  // value method dmem_master_m_awregion
  assign dmem_master_awregion = near_mem$dmem_master_awregion ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // value method dmem_master_m_wlast
  assign dmem_master_wlast = near_mem$dmem_master_wlast ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_arid
  assign dmem_master_arid = near_mem$dmem_master_arid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arlen
  assign dmem_master_arlen = near_mem$dmem_master_arlen ;

  // value method dmem_master_m_arsize
  assign dmem_master_arsize = near_mem$dmem_master_arsize ;

  // value method dmem_master_m_arburst
  assign dmem_master_arburst = near_mem$dmem_master_arburst ;

  // value method dmem_master_m_arlock
  assign dmem_master_arlock = near_mem$dmem_master_arlock ;

  // value method dmem_master_m_arcache
  assign dmem_master_arcache = near_mem$dmem_master_arcache ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // value method dmem_master_m_arqos
  assign dmem_master_arqos = near_mem$dmem_master_arqos ;

  // value method dmem_master_m_arregion
  assign dmem_master_arregion = near_mem$dmem_master_arregion ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // actionvalue method trace_data_out_get
  assign trace_data_out_get = f_trace_data$D_OUT ;
  assign RDY_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign CAN_FIRE_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign WILL_FIRE_trace_data_out_get = EN_trace_data_out_get ;

  // action method hart0_server_run_halt_request_put
  assign RDY_hart0_server_run_halt_request_put = f_run_halt_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_run_halt_request_put = f_run_halt_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_run_halt_request_put =
	     EN_hart0_server_run_halt_request_put ;

  // actionvalue method hart0_server_run_halt_response_get
  assign hart0_server_run_halt_response_get = f_run_halt_rsps$D_OUT ;
  assign RDY_hart0_server_run_halt_response_get = f_run_halt_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_run_halt_response_get =
	     f_run_halt_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_run_halt_response_get =
	     EN_hart0_server_run_halt_response_get ;

  // action method hart0_put_other_req_put
  assign RDY_hart0_put_other_req_put = 1'd1 ;
  assign CAN_FIRE_hart0_put_other_req_put = 1'd1 ;
  assign WILL_FIRE_hart0_put_other_req_put = EN_hart0_put_other_req_put ;

  // action method hart0_gpr_mem_server_request_put
  assign RDY_hart0_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign CAN_FIRE_hart0_gpr_mem_server_request_put = f_gpr_reqs$FULL_N ;
  assign WILL_FIRE_hart0_gpr_mem_server_request_put =
	     EN_hart0_gpr_mem_server_request_put ;

  // actionvalue method hart0_gpr_mem_server_response_get
  assign hart0_gpr_mem_server_response_get = f_gpr_rsps$D_OUT ;
  assign RDY_hart0_gpr_mem_server_response_get = f_gpr_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_gpr_mem_server_response_get = f_gpr_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_gpr_mem_server_response_get =
	     EN_hart0_gpr_mem_server_response_get ;

  // action method hart0_csr_mem_server_request_put
  assign RDY_hart0_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign CAN_FIRE_hart0_csr_mem_server_request_put = f_csr_reqs$FULL_N ;
  assign WILL_FIRE_hart0_csr_mem_server_request_put =
	     EN_hart0_csr_mem_server_request_put ;

  // actionvalue method hart0_csr_mem_server_response_get
  assign hart0_csr_mem_server_response_get = f_csr_rsps$D_OUT ;
  assign RDY_hart0_csr_mem_server_response_get = f_csr_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_csr_mem_server_response_get = f_csr_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_csr_mem_server_response_get =
	     EN_hart0_csr_mem_server_response_get ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .dcsr_break_enters_debug_cur_priv(csr_regfile$dcsr_break_enters_debug_cur_priv),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .write_dcsr_cause_priv_cause(csr_regfile$write_dcsr_cause_priv_cause),
			    .write_dcsr_cause_priv_priv(csr_regfile$write_dcsr_cause_priv_priv),
			    .write_dpc_pc(csr_regfile$write_dpc_pc),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_write_dpc(csr_regfile$EN_write_dpc),
			    .EN_write_dcsr_cause_priv(csr_regfile$EN_write_dcsr_cause_priv),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(csr_regfile$read_csr_port2),
			    .mav_read_csr(),
			    .mav_csr_write(csr_regfile$mav_csr_write),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .read_tag_ctrl(csr_regfile$read_tag_ctrl),
			    .RDY_read_tag_ctrl(),
			    .read_tag_scratch(),
			    .RDY_read_tag_scratch(),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(csr_regfile$csr_mip_read),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .read_dpc(csr_regfile$read_dpc),
			    .RDY_read_dpc(),
			    .RDY_write_dpc(),
			    .dcsr_break_enters_debug(csr_regfile$dcsr_break_enters_debug),
			    .RDY_dcsr_break_enters_debug(),
			    .read_dcsr_step(csr_regfile$read_dcsr_step),
			    .RDY_read_dcsr_step(),
			    .RDY_debug());

  // submodule f_csr_reqs
  FIFO2 #(.width(32'd45), .guarded(32'd1)) f_csr_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_csr_reqs$D_IN),
						      .ENQ(f_csr_reqs$ENQ),
						      .DEQ(f_csr_reqs$DEQ),
						      .CLR(f_csr_reqs$CLR),
						      .D_OUT(f_csr_reqs$D_OUT),
						      .FULL_N(f_csr_reqs$FULL_N),
						      .EMPTY_N(f_csr_reqs$EMPTY_N));

  // submodule f_csr_rsps
  FIFO2 #(.width(32'd33), .guarded(32'd1)) f_csr_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_csr_rsps$D_IN),
						      .ENQ(f_csr_rsps$ENQ),
						      .DEQ(f_csr_rsps$DEQ),
						      .CLR(f_csr_rsps$CLR),
						      .D_OUT(f_csr_rsps$D_OUT),
						      .FULL_N(f_csr_rsps$FULL_N),
						      .EMPTY_N(f_csr_rsps$EMPTY_N));

  // submodule f_gpr_reqs
  FIFO2 #(.width(32'd38), .guarded(32'd1)) f_gpr_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_gpr_reqs$D_IN),
						      .ENQ(f_gpr_reqs$ENQ),
						      .DEQ(f_gpr_reqs$DEQ),
						      .CLR(f_gpr_reqs$CLR),
						      .D_OUT(f_gpr_reqs$D_OUT),
						      .FULL_N(f_gpr_reqs$FULL_N),
						      .EMPTY_N(f_gpr_reqs$EMPTY_N));

  // submodule f_gpr_rsps
  FIFO2 #(.width(32'd33), .guarded(32'd1)) f_gpr_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_gpr_rsps$D_IN),
						      .ENQ(f_gpr_rsps$ENQ),
						      .DEQ(f_gpr_rsps$DEQ),
						      .CLR(f_gpr_rsps$CLR),
						      .D_OUT(f_gpr_rsps$D_OUT),
						      .FULL_N(f_gpr_rsps$FULL_N),
						      .EMPTY_N(f_gpr_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_run_halt_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_run_halt_reqs(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_run_halt_reqs$D_IN),
							  .ENQ(f_run_halt_reqs$ENQ),
							  .DEQ(f_run_halt_reqs$DEQ),
							  .CLR(f_run_halt_reqs$CLR),
							  .D_OUT(f_run_halt_reqs$D_OUT),
							  .FULL_N(f_run_halt_reqs$FULL_N),
							  .EMPTY_N(f_run_halt_reqs$EMPTY_N));

  // submodule f_run_halt_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_run_halt_rsps(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_run_halt_rsps$D_IN),
							  .ENQ(f_run_halt_rsps$ENQ),
							  .DEQ(f_run_halt_rsps$DEQ),
							  .CLR(f_run_halt_rsps$CLR),
							  .D_OUT(f_run_halt_rsps$D_OUT),
							  .FULL_N(f_run_halt_rsps$FULL_N),
							  .EMPTY_N(f_run_halt_rsps$EMPTY_N));

  // submodule f_trace_data
  FIFO2 #(.width(32'd234), .guarded(32'd1)) f_trace_data(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_trace_data$D_IN),
							 .ENQ(f_trace_data$ENQ),
							 .DEQ(f_trace_data$DEQ),
							 .CLR(f_trace_data$CLR),
							 .D_OUT(f_trace_data$D_OUT),
							 .FULL_N(f_trace_data$FULL_N),
							 .EMPTY_N(f_trace_data$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .write_rd_write_tag_only(gpr_regfile$write_rd_write_tag_only),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(gpr_regfile$read_rs1_port2),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_arready(near_mem$dmem_master_arready),
		      .dmem_master_awready(near_mem$dmem_master_awready),
		      .dmem_master_bid(near_mem$dmem_master_bid),
		      .dmem_master_bresp(near_mem$dmem_master_bresp),
		      .dmem_master_bvalid(near_mem$dmem_master_bvalid),
		      .dmem_master_rdata(near_mem$dmem_master_rdata),
		      .dmem_master_rid(near_mem$dmem_master_rid),
		      .dmem_master_rlast(near_mem$dmem_master_rlast),
		      .dmem_master_rresp(near_mem$dmem_master_rresp),
		      .dmem_master_rvalid(near_mem$dmem_master_rvalid),
		      .dmem_master_wready(near_mem$dmem_master_wready),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .pmp_csrs_pmpaddr_read_j(near_mem$pmp_csrs_pmpaddr_read_j),
		      .pmp_csrs_pmpaddr_write_addr(near_mem$pmp_csrs_pmpaddr_write_addr),
		      .pmp_csrs_pmpaddr_write_j(near_mem$pmp_csrs_pmpaddr_write_j),
		      .pmp_csrs_pmpcfg_read_j(near_mem$pmp_csrs_pmpcfg_read_j),
		      .pmp_csrs_pmpcfg_write_j(near_mem$pmp_csrs_pmpcfg_write_j),
		      .pmp_csrs_pmpcfg_write_x(near_mem$pmp_csrs_pmpcfg_write_x),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma(near_mem$EN_sfence_vma),
		      .EN_pmp_csrs_pmpcfg_write(near_mem$EN_pmp_csrs_pmpcfg_write),
		      .EN_pmp_csrs_pmpaddr_write(near_mem$EN_pmp_csrs_pmpaddr_write),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .dmem_master_awvalid(near_mem$dmem_master_awvalid),
		      .dmem_master_awid(near_mem$dmem_master_awid),
		      .dmem_master_awaddr(near_mem$dmem_master_awaddr),
		      .dmem_master_awlen(near_mem$dmem_master_awlen),
		      .dmem_master_awsize(near_mem$dmem_master_awsize),
		      .dmem_master_awburst(near_mem$dmem_master_awburst),
		      .dmem_master_awlock(near_mem$dmem_master_awlock),
		      .dmem_master_awcache(near_mem$dmem_master_awcache),
		      .dmem_master_awprot(near_mem$dmem_master_awprot),
		      .dmem_master_awqos(near_mem$dmem_master_awqos),
		      .dmem_master_awregion(near_mem$dmem_master_awregion),
		      .dmem_master_wvalid(near_mem$dmem_master_wvalid),
		      .dmem_master_wdata(near_mem$dmem_master_wdata),
		      .dmem_master_wstrb(near_mem$dmem_master_wstrb),
		      .dmem_master_wlast(near_mem$dmem_master_wlast),
		      .dmem_master_bready(near_mem$dmem_master_bready),
		      .dmem_master_arvalid(near_mem$dmem_master_arvalid),
		      .dmem_master_arid(near_mem$dmem_master_arid),
		      .dmem_master_araddr(near_mem$dmem_master_araddr),
		      .dmem_master_arlen(near_mem$dmem_master_arlen),
		      .dmem_master_arsize(near_mem$dmem_master_arsize),
		      .dmem_master_arburst(near_mem$dmem_master_arburst),
		      .dmem_master_arlock(near_mem$dmem_master_arlock),
		      .dmem_master_arcache(near_mem$dmem_master_arcache),
		      .dmem_master_arprot(near_mem$dmem_master_arprot),
		      .dmem_master_arqos(near_mem$dmem_master_arqos),
		      .dmem_master_arregion(near_mem$dmem_master_arregion),
		      .dmem_master_rready(near_mem$dmem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma(),
		      .pmp_csrs_pmpcfg_read(),
		      .RDY_pmp_csrs_pmpcfg_read(),
		      .pmp_csrs_pmpcfg_write(),
		      .RDY_pmp_csrs_pmpcfg_write(),
		      .pmp_csrs_pmpaddr_read(),
		      .RDY_pmp_csrs_pmpaddr_read(),
		      .pmp_csrs_pmpaddr_write(),
		      .RDY_pmp_csrs_pmpaddr_write());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_flash_mem_addr_base(),
		    .m_flash_mem_addr_size(),
		    .m_flash_mem_addr_lim(),
		    .m_ethernet_0_addr_base(),
		    .m_ethernet_0_addr_size(),
		    .m_ethernet_0_addr_lim(),
		    .m_dma_0_addr_base(),
		    .m_dma_0_addr_size(),
		    .m_dma_0_addr_lim(),
		    .m_uart16550_0_addr_base(),
		    .m_uart16550_0_addr_size(),
		    .m_uart16550_0_addr_lim(),
		    .m_gpio_0_addr_base(),
		    .m_gpio_0_addr_size(),
		    .m_gpio_0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_ddr4_0_uncached_addr_base(),
		    .m_ddr4_0_uncached_addr_size(),
		    .m_ddr4_0_uncached_addr_lim(),
		    .m_ddr4_0_cached_addr_base(),
		    .m_ddr4_0_cached_addr_size(),
		    .m_ddr4_0_cached_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 &&
	     rg_state != 4'd13 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_stage1_mip_cmd
  assign CAN_FIRE_RL_rl_stage1_mip_cmd =
	     f_trace_data$FULL_N && rg_state == 4'd4 &&
	     stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1352 &&
	     !csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 ;
  assign WILL_FIRE_RL_rl_stage1_mip_cmd = CAN_FIRE_RL_rl_stage1_mip_cmd ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA =
	     f_trace_data$FULL_N &&
	     rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd7 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA =
	     CAN_FIRE_RL_rl_stage1_SFENCE_VMA ;

  // rule RL_rl_debug_run_redundant
  assign CAN_FIRE_RL_rl_debug_run_redundant =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_run_redundant =
	     CAN_FIRE_RL_rl_debug_run_redundant &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;

  // rule RL_rl_debug_halt_redundant
  assign CAN_FIRE_RL_rl_debug_halt_redundant =
	     f_run_halt_rsps$FULL_N && f_run_halt_reqs$EMPTY_N &&
	     !f_run_halt_reqs$D_OUT &&
	     (rg_state == 4'd0 || rg_state == 4'd1 || rg_state == 4'd2 ||
	      rg_state == 4'd3) ;
  assign WILL_FIRE_RL_rl_debug_halt_redundant =
	     CAN_FIRE_RL_rl_debug_halt_redundant &&
	     !WILL_FIRE_RL_rl_BREAK_cache_flush_finish ;

  // rule RL_rl_debug_read_gpr
  assign CAN_FIRE_RL_rl_debug_read_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 4'd3 &&
	     !f_gpr_reqs$D_OUT[37] ;
  assign WILL_FIRE_RL_rl_debug_read_gpr = CAN_FIRE_RL_rl_debug_read_gpr ;

  // rule RL_rl_debug_write_gpr
  assign CAN_FIRE_RL_rl_debug_write_gpr =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state == 4'd3 &&
	     f_gpr_reqs$D_OUT[37] ;
  assign WILL_FIRE_RL_rl_debug_write_gpr = CAN_FIRE_RL_rl_debug_write_gpr ;

  // rule RL_rl_debug_gpr_access_busy
  assign CAN_FIRE_RL_rl_debug_gpr_access_busy =
	     f_gpr_reqs$EMPTY_N && f_gpr_rsps$FULL_N && rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_gpr_access_busy =
	     CAN_FIRE_RL_rl_debug_gpr_access_busy ;

  // rule RL_rl_debug_read_csr
  assign CAN_FIRE_RL_rl_debug_read_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 4'd3 &&
	     !f_csr_reqs$D_OUT[44] ;
  assign WILL_FIRE_RL_rl_debug_read_csr = CAN_FIRE_RL_rl_debug_read_csr ;

  // rule RL_rl_debug_run
  assign CAN_FIRE_RL_rl_debug_run =
	     NOT_near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_ETC___d2179 &&
	     f_run_halt_reqs$D_OUT &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_run =
	     CAN_FIRE_RL_rl_debug_run &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_debug_csr_access_busy
  assign CAN_FIRE_RL_rl_debug_csr_access_busy =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_csr_access_busy =
	     CAN_FIRE_RL_rl_debug_csr_access_busy ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd12 &&
	     (x_out_trap_info_exc_code__h16962 != 5'd3 ||
	      !csr_regfile$dcsr_break_enters_debug) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W =
	     rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd3 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = CAN_FIRE_RL_rl_stage1_CSRR_W ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd4 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     CAN_FIRE_RL_rl_stage1_CSRR_S_or_C ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     f_trace_data$FULL_N &&
	     rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 &&
	     (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	      4'd8 ||
	      IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	      4'd9 ||
	      IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	      4'd10) ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I =
	     near_mem$RDY_server_fence_i_request_put && f_trace_data$FULL_N &&
	     rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd6 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = CAN_FIRE_RL_rl_stage1_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE =
	     near_mem$RDY_server_fence_request_put && f_trace_data$FULL_N &&
	     rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd5 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = CAN_FIRE_RL_rl_stage1_FENCE ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI =
	     f_trace_data$FULL_N &&
	     rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd11 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = CAN_FIRE_RL_rl_stage1_WFI ;

  // rule RL_rl_trap_BREAK_to_Debug_Mode
  assign CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     near_mem$RDY_server_fence_i_request_put &&
	     f_run_halt_rsps$FULL_N &&
	     rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd12 &&
	     x_out_trap_info_exc_code__h16962 == 5'd3 &&
	     csr_regfile$dcsr_break_enters_debug ;
  assign WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode =
	     CAN_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;

  // rule RL_rl_BREAK_cache_flush_finish
  assign CAN_FIRE_RL_rl_BREAK_cache_flush_finish =
	     near_mem$RDY_server_fence_i_response_get &&
	     f_run_halt_rsps$FULL_N &&
	     rg_state == 4'd2 ;
  assign WILL_FIRE_RL_rl_BREAK_cache_flush_finish =
	     CAN_FIRE_RL_rl_BREAK_cache_flush_finish ;

  // rule RL_rl_stage1_stop
  assign CAN_FIRE_RL_rl_stage1_stop =
	     near_mem$RDY_server_fence_i_request_put && rg_state == 4'd4 &&
	     rg_stop_req_379_OR_rg_step_count_380_381_AND_s_ETC___d2161 ;
  assign WILL_FIRE_RL_rl_stage1_stop =
	     CAN_FIRE_RL_rl_stage1_stop &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_tagger_rl_tag_active
  assign CAN_FIRE_RL_tagger_rl_tag_active = csr_regfile$read_tag_ctrl[0] ;
  assign WILL_FIRE_RL_tagger_rl_tag_active =
	     CAN_FIRE_RL_tagger_rl_tag_active ;

  // rule RL_rl_debug_write_csr
  assign CAN_FIRE_RL_rl_debug_write_csr =
	     f_csr_reqs$EMPTY_N && f_csr_rsps$FULL_N && rg_state == 4'd3 &&
	     f_csr_reqs$D_OUT[44] ;
  assign WILL_FIRE_RL_rl_debug_write_csr =
	     CAN_FIRE_RL_rl_debug_write_csr && !WILL_FIRE_RL_rl_debug_run ;

  // rule RL_tagger_tp_m1_rl_startup
  assign CAN_FIRE_RL_tagger_tp_m1_rl_startup = !tagger_tp_m1_initialized ;
  assign WILL_FIRE_RL_tagger_tp_m1_rl_startup =
	     CAN_FIRE_RL_tagger_tp_m1_rl_startup ;

  // rule RL_imem_rl_assert_fail
  assign CAN_FIRE_RL_imem_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_rl_assert_fail = CAN_FIRE_RL_imem_rl_assert_fail ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps_i_notEmpty__320_AND_stage3_ETC___d1329 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete =
	     CAN_FIRE_RL_rl_reset_complete &&
	     !WILL_FIRE_RL_imem_rl_fetch_next_32b &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd2 ||
	      f_trace_data$FULL_N) &&
	     stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1407 &&
	     rg_state_8_EQ_4_342_AND_stage3_rg_full_0_OR_NO_ETC___d1420 &&
	     NOT_rg_stop_req_379_421_AND_NOT_rg_step_count__ETC___d1434 ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_debug_halt
  assign CAN_FIRE_RL_rl_debug_halt =
	     f_run_halt_reqs$EMPTY_N && !f_run_halt_reqs$D_OUT &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd2 &&
	     rg_state != 4'd3 ;
  assign WILL_FIRE_RL_rl_debug_halt =
	     CAN_FIRE_RL_rl_debug_halt && !WILL_FIRE_RL_rl_stage1_stop &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	     !WILL_FIRE_RL_rl_stage1_WFI &&
	     !WILL_FIRE_RL_rl_stage1_FENCE &&
	     !WILL_FIRE_RL_rl_stage1_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_xRET &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     !WILL_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd4 && !stage3_rg_full &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd3 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap =
	     f_trace_data$FULL_N && rg_state == 4'd5 &&
	     NOT_stage1_rg_full_39_40_OR_near_mem_imem_vali_ETC___d1998 ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_stage1_CSRR_W_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 =
	     (!csr_regfile$access_permitted_1 || f_trace_data$FULL_N) &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = CAN_FIRE_RL_rl_stage1_CSRR_W_2 ;

  // rule RL_rl_stage1_CSRR_S_or_C_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 =
	     (!csr_regfile$access_permitted_2 || f_trace_data$FULL_N) &&
	     rg_state == 4'd8 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 =
	     CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_i_response_get &&
	     rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd12 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd13 &&
	     csr_regfile$wfi_resume ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd13 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_reset_from_Debug_Module
  assign CAN_FIRE_RL_rl_reset_from_Debug_Module =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_from_Debug_Module =
	     CAN_FIRE_RL_rl_reset_from_Debug_Module &&
	     !WILL_FIRE_RL_rl_BREAK_cache_flush_finish &&
	     !WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	     !WILL_FIRE_RL_rl_trap_fetch &&
	     !WILL_FIRE_RL_rl_reset_from_WFI &&
	     !WILL_FIRE_RL_rl_WFI_resume &&
	     !WILL_FIRE_RL_rl_stage1_WFI &&
	     !WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	     !WILL_FIRE_RL_rl_finish_FENCE &&
	     !WILL_FIRE_RL_rl_stage1_FENCE &&
	     !WILL_FIRE_RL_rl_finish_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_FENCE_I &&
	     !WILL_FIRE_RL_rl_stage1_xRET &&
	     !WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     !WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     !WILL_FIRE_RL_rl_trap &&
	     !WILL_FIRE_RL_rl_stage1_trap &&
	     !WILL_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[5] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd4 &&
	     stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1352 &&
	     csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 ;
  assign WILL_FIRE_RL_rl_stage1_interrupt =
	     CAN_FIRE_RL_rl_stage1_interrupt &&
	     !WILL_FIRE_RL_rl_reset_from_Debug_Module ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem_RDY_server_reset_request_put__297_AND_ETC___d1309 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_f_reset_rsps$FULL_N && stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ;
  assign MUX_csr_regfile$mav_csr_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ;
  assign MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ;
  assign MUX_csr_regfile$write_dpc_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign MUX_f_run_halt_rsps$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign MUX_f_trace_data$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd2 ;
  assign MUX_f_trace_data$enq_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_f_trace_data$enq_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_gpr_regfile$write_rd_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[69] ;
  assign MUX_imem_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ;
  assign MUX_imem_rg_f3$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 ;
  assign MUX_imem_rg_f3$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_debug_run || WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_imem_rg_mstatus_MXR$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_debug_run || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_imem_rg_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_near_mem$imem_req_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_rg_next_pc$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_rg_state$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_reset_from_Debug_Module ||
	     WILL_FIRE_RL_rl_reset_from_WFI ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_stage1_xRET || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_step_count$write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_pipe ;
  assign MUX_rg_step_count$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_stop || WILL_FIRE_RL_rl_reset_start ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_trap_instr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  assign MUX_rg_trap_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_trap_trace_data$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  always@(rg_trap_instr or
	  csr_regfile$read_csr or
	  y__h27877 or
	  IF_csr_regfile_read_csr_rg_trap_instr_025_BITS_ETC___d2079)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_rg_trap_instr_025_BITS_ETC___d2079;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[31:0] & y__h27877;
    endcase
  end
  assign MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2 =
	     rg_stop_req ? 3'd3 : 3'd4 ;
  assign MUX_f_csr_rsps$enq_1__VAL_3 =
	     { 1'd1, csr_regfile$read_csr_port2[31:0] } ;
  assign MUX_f_gpr_rsps$enq_1__VAL_3 =
	     { 1'd1, gpr_regfile$read_rs1_port2[63:32] } ;
  assign MUX_f_trace_data$enq_1__VAL_1 =
	     { stage2_rg_stage2[233:160],
	       CASE_stage2_rg_stage2_BITS_433_TO_431_0_stage2_ETC__q32,
	       stage2_rg_stage2[127:0] } ;
  assign MUX_f_trace_data$enq_1__VAL_2 =
	     { 4'd14,
	       rg_trap_trace_data[229:165],
	       rg_trap_instr[11:7],
	       csr_regfile$read_csr[31:0],
	       32'd1,
	       x_word3__h27987,
	       csr_regfile$mav_csr_write } ;
  assign MUX_f_trace_data$enq_1__VAL_3 =
	     { 4'd14,
	       rg_trap_trace_data[229:165],
	       rg_trap_instr[11:7],
	       csr_regfile$read_csr[31:0],
	       x__h28034,
	       x_word3__h27987,
	       x__h28042 } ;
  assign MUX_f_trace_data$enq_1__VAL_4 =
	     { IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761,
	       x_out_data_to_stage2_trace_data_pc__h23052,
	       near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d528,
	       x_out_data_to_stage2_trace_data_instr__h23054,
	       x_out_data_to_stage2_trace_data_rd__h23055,
	       x_out_data_to_stage2_trace_data_word1__h23056,
	       rs2_val__h13530,
	       x_out_data_to_stage2_trace_data_word3__h23058,
	       32'hAAAAAAAA } ;
  assign MUX_f_trace_data$enq_1__VAL_6 =
	     { 202'h0EAAAAAAA955555554AAAAAAAAAAAAAAAAA0000000000000344,
	       csr_regfile$csr_mip_read } ;
  assign MUX_f_trace_data$enq_1__VAL_7 =
	     { rg_trap_interrupt ? 4'd15 : 4'd12,
	       csr_regfile$csr_trap_actions[97:66],
	       rg_trap_trace_data[197:165],
	       x_rd__h26171,
	       csr_regfile$csr_trap_actions[65:2],
	       x_word3__h26174,
	       x__h26339 } ;
  assign MUX_f_trace_data$enq_1__VAL_8 =
	     { 4'd13,
	       csr_regfile$csr_ret_actions[65:34],
	       near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d528,
	       x_out_data_to_stage2_trace_data_instr__h23054,
	       td1_rd__h28910,
	       csr_regfile$csr_ret_actions[31:0],
	       128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_gpr_regfile$write_rd_2__VAL_2 =
	     { csr_regfile$read_csr[31:0], 32'd0 } ;
  assign MUX_gpr_regfile$write_rd_2__VAL_4 =
	     { f_gpr_reqs$D_OUT[31:0], 32'd0 } ;
  assign MUX_gpr_regfile$write_rd_3__VAL_1 =
	     stage3_rg_stage3[78:72] == 7'b0000011 &&
	     stage3_rg_stage3[86:84] == 3'b111 ;
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     { soc_map$m_pc_reset_value[31:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_2 =
	     { x_out_next_pc__h13378[31:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_5 = { rg_next_pc[31:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_7 =
	     { csr_regfile$read_dpc[31:2], 2'b0 } ;
  assign MUX_rg_state$write_1__VAL_1 = rg_run_on_reset ? 4'd4 : 4'd3 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_1 ? 4'd9 : 4'd5 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     csr_regfile$access_permitted_2 ? 4'd9 : 4'd5 ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { imem_rg_pc, 5'd2, value__h17003 } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { stage2_rg_stage2[497:466],
	       near_mem$dmem_exc_code,
	       stage2_rg_stage2[425:394] } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { imem_rg_pc,
	       IF_near_mem_imem_exc__44_THEN_near_mem_imem_ex_ETC___d1995 } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { imem_rg_pc, x_exc_code__h32989, 32'd0 } ;
  assign MUX_stage1_rg_full$write_1__VAL_9 =
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1864 ||
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1870 ;
  assign MUX_stage2_rg_full$write_1__VAL_3 =
	     _0_OR_0_OR_near_mem_imem_exc__44_OR_IF_IF_IF_NO_ETC___d1858 ||
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	     2'd2 &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	     2'd0 ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN =
	     EN_hart0_put_other_req_put ?
	       hart0_put_other_req_put :
	       set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_hart0_put_other_req_put || EN_set_verbosity ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_instr_15_0
  assign imem_rg_instr_15_0$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_instr_15_0$EN = CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_f3$write_1__SEL_2 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_4) ?
	       csr_regfile$read_mstatus[19] :
	       rg_mstatus_MXR ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_pc
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  x_out_next_pc__h13378 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  rg_next_pc or WILL_FIRE_RL_rl_debug_run or csr_regfile$read_dpc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  imem_rg_pc$D_IN = soc_map$m_pc_reset_value[31:0];
      MUX_imem_rg_f3$write_1__SEL_2: imem_rg_pc$D_IN = x_out_next_pc__h13378;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_pc$D_IN = x_out_next_pc__h13378;
      MUX_imem_rg_pc$write_1__SEL_4: imem_rg_pc$D_IN = rg_next_pc;
      WILL_FIRE_RL_rl_debug_run: imem_rg_pc$D_IN = csr_regfile$read_dpc;
      default: imem_rg_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register imem_rg_priv
  assign imem_rg_priv$D_IN = rg_cur_priv ;
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN =
	     WILL_FIRE_RL_rl_trap_fetch && rg_sstatus_SUM ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_tval
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  x_out_next_pc__h13378 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  rg_next_pc or
	  WILL_FIRE_RL_rl_debug_run or
	  csr_regfile$read_dpc or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or next_pc___1__h17115)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  imem_rg_tval$D_IN = soc_map$m_pc_reset_value[31:0];
      MUX_imem_rg_f3$write_1__SEL_2:
	  imem_rg_tval$D_IN = x_out_next_pc__h13378;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_tval$D_IN = x_out_next_pc__h13378;
      MUX_imem_rg_pc$write_1__SEL_4: imem_rg_tval$D_IN = rg_next_pc;
      WILL_FIRE_RL_rl_debug_run: imem_rg_tval$D_IN = csr_regfile$read_dpc;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_tval$D_IN = next_pc___1__h17115;
      default: imem_rg_tval$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_tval$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register rg_csr_pc
  assign rg_csr_pc$D_IN = imem_rg_pc ;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_csr_val1
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h13420 ;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_cur_priv
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_10 ;

  // register rg_next_pc
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_rg_next_pc$write_1__SEL_3 or x_out_next_pc__h13378)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[97:66];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[65:34];
      MUX_rg_next_pc$write_1__SEL_3: rg_next_pc$D_IN = x_out_next_pc__h13378;
      default: rg_next_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;

  // register rg_prev_mip
  assign rg_prev_mip$D_IN =
	     WILL_FIRE_RL_rl_stage1_mip_cmd ?
	       csr_regfile$csr_mip_read :
	       32'd0 ;
  assign rg_prev_mip$EN =
	     WILL_FIRE_RL_rl_stage1_mip_cmd || WILL_FIRE_RL_rl_reset_start ;

  // register rg_run_on_reset
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT ;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = 1'd0 ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_10 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_debug_run ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W_2 or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or
	  MUX_rg_state$write_1__VAL_3 or
	  MUX_rg_state$write_1__SEL_4 or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_csr_regfile$write_dpc_1__SEL_2 or
	  WILL_FIRE_RL_rl_BREAK_cache_flush_finish or
	  MUX_imem_rg_f3$write_1__SEL_3 or
	  MUX_rg_state$write_1__SEL_9 or
	  MUX_rg_state$write_1__SEL_10 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_W_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      MUX_rg_state$write_1__SEL_4: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_csr_regfile$write_dpc_1__SEL_2: rg_state$D_IN = 4'd2;
      WILL_FIRE_RL_rl_BREAK_cache_flush_finish: rg_state$D_IN = 4'd3;
      MUX_imem_rg_f3$write_1__SEL_3: rg_state$D_IN = 4'd4;
      MUX_rg_state$write_1__SEL_9: rg_state$D_IN = 4'd5;
      MUX_rg_state$write_1__SEL_10: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'd8;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd10;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd11;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd12;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd13;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ||
	     WILL_FIRE_RL_rl_reset_from_Debug_Module ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register rg_step_count
  assign rg_step_count$D_IN = !MUX_rg_step_count$write_1__SEL_3 ;
  assign rg_step_count$EN =
	     MUX_rg_step_count$write_1__PSEL_1 &&
	     stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1876 ||
	     WILL_FIRE_RL_rl_stage1_xRET && csr_regfile$read_dcsr_step &&
	     !rg_step_count ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stop_req
  assign rg_stop_req$D_IN = !MUX_rg_step_count$write_1__SEL_3 ;
  assign rg_stop_req$EN =
	     WILL_FIRE_RL_rl_stage1_stop || WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_debug_halt ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_trap:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   69'h0AAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_instr
  assign rg_trap_instr$D_IN =
	     MUX_rg_trap_instr$write_1__SEL_1 ?
	       x_out_data_to_stage2_instr__h13415 :
	       stage2_rg_stage2[465:434] ;
  assign rg_trap_instr$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;

  // register rg_trap_interrupt
  assign rg_trap_interrupt$D_IN = !MUX_rg_trap_interrupt$write_1__SEL_1 ;
  assign rg_trap_interrupt$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_trace_data
  assign rg_trap_trace_data$D_IN =
	     MUX_rg_trap_trace_data$write_1__SEL_1 ?
	       MUX_f_trace_data$enq_1__VAL_4 :
	       MUX_f_trace_data$enq_1__VAL_1 ;
  assign rg_trap_trace_data$EN = MUX_rg_trap_interrupt$write_1__SEL_1 ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_9 or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_stage1_xRET or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_trap: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_9;
    MUX_imem_rg_f3$write_1__SEL_1: stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage1_xRET: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_debug_run: stage1_rg_full$D_IN = 1'd1;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register stage2_rg_full
  always@(stage2_f_reset_reqs$EMPTY_N or
	  WILL_FIRE_RL_rl_trap or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_3 or
	  MUX_imem_rg_f3$write_1__SEL_1 or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    stage2_f_reset_reqs$EMPTY_N || WILL_FIRE_RL_rl_trap:
	stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_3;
    MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_debug_run:
	stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_trap ||
	     stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end || stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h13415,
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573,
	       x_out_data_to_stage2_rd__h13417,
	       x_out_data_to_stage2_addr__h13418,
	       _theResult____h4950[6:0] != 7'b1100011 &&
	       _theResult____h4950[6:0] != 7'b1101111 &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d602,
	       NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1563,
	       x_out_data_to_stage2_val1__h13420,
	       x_out_data_to_stage2_val2__h13421,
	       NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1746,
	       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1752,
	       IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761,
	       x_out_data_to_stage2_trace_data_pc__h23052,
	       near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d528,
	       x_out_data_to_stage2_trace_data_instr__h23054,
	       x_out_data_to_stage2_trace_data_rd__h23055,
	       x_out_data_to_stage2_trace_data_word1__h23056,
	       rs2_val__h13530,
	       x_out_data_to_stage2_trace_data_word3__h23058,
	       32'hAAAAAAAA } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1496 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 or
	  MUX_imem_rg_f3$write_1__SEL_1 or WILL_FIRE_RL_rl_debug_run)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN =
	    IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2;
    MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_debug_run:
	stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[497:434],
	       stage2_rg_stage2[499:498],
	       stage2_rg_stage2[433:431] == 3'd0 ||
	       IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d168,
	       x_out_data_to_stage3_rd__h7232,
	       (stage2_rg_stage2[433:431] == 3'd0) ?
		 { stage2_rg_stage2[361:330], stage2_rg_stage2[297:266] } :
		 IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d1453 } ;
  assign stage3_rg_stage3$EN = MUX_f_trace_data$enq_1__SEL_1 ;

  // register tagger_tp_m1_initialized
  assign tagger_tp_m1_initialized$D_IN = 1'd1 ;
  assign tagger_tp_m1_initialized$EN = CAN_FIRE_RL_tagger_tp_m1_rl_startup ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h27594 == 32'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015)
  begin
    case (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015)
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd9: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[36:32] ;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     rg_trap_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     rg_trap_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[68:37] ;
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[31:0] ;
  assign csr_regfile$dcsr_break_enters_debug_cur_priv = rg_cur_priv ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_csr_regfile$mav_csr_write_1__SEL_2) ?
	       rg_trap_instr[31:20] :
	       f_csr_reqs$D_OUT[43:32] ;
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  rs1_val__h26763 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_2 or
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 or
	  WILL_FIRE_RL_rl_debug_write_csr or f_csr_reqs$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  csr_regfile$mav_csr_write_word = rs1_val__h26763;
      MUX_csr_regfile$mav_csr_write_1__SEL_2:
	  csr_regfile$mav_csr_write_word =
	      MUX_csr_regfile$mav_csr_write_2__VAL_2;
      WILL_FIRE_RL_rl_debug_write_csr:
	  csr_regfile$mav_csr_write_word = f_csr_reqs$D_OUT[31:0];
      default: csr_regfile$mav_csr_write_word =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = f_csr_reqs$D_OUT[43:32] ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  always@(MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 or
	  WILL_FIRE_RL_rl_stage1_stop or
	  MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2 or
	  WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd3;
      WILL_FIRE_RL_rl_stage1_stop:
	  csr_regfile$write_dcsr_cause_priv_cause =
	      MUX_csr_regfile$write_dcsr_cause_priv_1__VAL_2;
      WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode:
	  csr_regfile$write_dcsr_cause_priv_cause = 3'd1;
      default: csr_regfile$write_dcsr_cause_priv_cause =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$write_dcsr_cause_priv_priv =
	     (WILL_FIRE_RL_rl_stage1_stop ||
	      WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode) ?
	       rg_cur_priv :
	       2'b11 ;
  assign csr_regfile$write_dpc_pc =
	     MUX_csr_regfile$write_dcsr_cause_priv_1__SEL_1 ?
	       soc_map$m_pc_reset_value[31:0] :
	       imem_rg_pc ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ||
	     WILL_FIRE_RL_rl_debug_write_csr ;
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign csr_regfile$EN_write_dpc =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign csr_regfile$EN_write_dcsr_cause_priv =
	     WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset ||
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_csr_reqs
  assign f_csr_reqs$D_IN = hart0_csr_mem_server_request_put ;
  assign f_csr_reqs$ENQ = EN_hart0_csr_mem_server_request_put ;
  assign f_csr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_csr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_reqs$CLR = 1'b0 ;

  // submodule f_csr_rsps
  always@(WILL_FIRE_RL_rl_debug_csr_access_busy or
	  WILL_FIRE_RL_rl_debug_write_csr or
	  WILL_FIRE_RL_rl_debug_read_csr or MUX_f_csr_rsps$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_debug_csr_access_busy: f_csr_rsps$D_IN = 33'h0AAAAAAAA;
      WILL_FIRE_RL_rl_debug_write_csr: f_csr_rsps$D_IN = 33'h1AAAAAAAA;
      WILL_FIRE_RL_rl_debug_read_csr:
	  f_csr_rsps$D_IN = MUX_f_csr_rsps$enq_1__VAL_3;
      default: f_csr_rsps$D_IN = 33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_csr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_csr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_csr ||
	     WILL_FIRE_RL_rl_debug_read_csr ;
  assign f_csr_rsps$DEQ = EN_hart0_csr_mem_server_response_get ;
  assign f_csr_rsps$CLR = 1'b0 ;

  // submodule f_gpr_reqs
  assign f_gpr_reqs$D_IN = hart0_gpr_mem_server_request_put ;
  assign f_gpr_reqs$ENQ = EN_hart0_gpr_mem_server_request_put ;
  assign f_gpr_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_gpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_reqs$CLR = 1'b0 ;

  // submodule f_gpr_rsps
  always@(WILL_FIRE_RL_rl_debug_gpr_access_busy or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  WILL_FIRE_RL_rl_debug_read_gpr or MUX_f_gpr_rsps$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_debug_gpr_access_busy: f_gpr_rsps$D_IN = 33'h0AAAAAAAA;
      WILL_FIRE_RL_rl_debug_write_gpr: f_gpr_rsps$D_IN = 33'h1AAAAAAAA;
      WILL_FIRE_RL_rl_debug_read_gpr:
	  f_gpr_rsps$D_IN = MUX_f_gpr_rsps$enq_1__VAL_3;
      default: f_gpr_rsps$D_IN = 33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_gpr_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_gpr_access_busy ||
	     WILL_FIRE_RL_rl_debug_write_gpr ||
	     WILL_FIRE_RL_rl_debug_read_gpr ;
  assign f_gpr_rsps$DEQ = EN_hart0_gpr_mem_server_response_get ;
  assign f_gpr_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = hart0_server_reset_request_put ;
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ = CAN_FIRE_RL_rl_reset_start ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = rg_run_on_reset ;
  assign f_reset_rsps$ENQ = WILL_FIRE_RL_rl_reset_complete ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_run_halt_reqs
  assign f_run_halt_reqs$D_IN = hart0_server_run_halt_request_put ;
  assign f_run_halt_reqs$ENQ = EN_hart0_server_run_halt_request_put ;
  assign f_run_halt_reqs$DEQ =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_debug_halt ||
	     WILL_FIRE_RL_rl_debug_run_redundant ;
  assign f_run_halt_reqs$CLR = 1'b0 ;

  // submodule f_run_halt_rsps
  assign f_run_halt_rsps$D_IN = !MUX_f_run_halt_rsps$enq_1__SEL_1 ;
  assign f_run_halt_rsps$ENQ =
	     WILL_FIRE_RL_rl_debug_halt_redundant ||
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_debug_run ||
	     WILL_FIRE_RL_rl_debug_run_redundant ;
  assign f_run_halt_rsps$DEQ = EN_hart0_server_run_halt_response_get ;
  assign f_run_halt_rsps$CLR = 1'b0 ;

  // submodule f_trace_data
  always@(MUX_f_trace_data$enq_1__SEL_1 or
	  MUX_f_trace_data$enq_1__VAL_1 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_f_trace_data$enq_1__VAL_2 or
	  MUX_f_trace_data$enq_1__SEL_3 or
	  MUX_f_trace_data$enq_1__VAL_3 or
	  MUX_f_trace_data$enq_1__SEL_4 or
	  MUX_f_trace_data$enq_1__VAL_4 or
	  WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_rl_stage1_mip_cmd or
	  MUX_f_trace_data$enq_1__VAL_6 or
	  WILL_FIRE_RL_rl_trap or
	  MUX_f_trace_data$enq_1__VAL_7 or
	  WILL_FIRE_RL_rl_stage1_xRET or MUX_f_trace_data$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_trace_data$enq_1__SEL_1:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_1;
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_2;
      MUX_f_trace_data$enq_1__SEL_3:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_3;
      MUX_f_trace_data$enq_1__SEL_4:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_4;
      WILL_FIRE_RL_rl_reset_start:
	  f_trace_data$D_IN =
	      234'h02AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_stage1_mip_cmd:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_6;
      WILL_FIRE_RL_rl_trap: f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_7;
      WILL_FIRE_RL_rl_stage1_xRET:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_8;
      default: f_trace_data$D_IN =
		   234'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_trace_data$ENQ =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_mip_cmd ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign f_trace_data$DEQ = EN_trace_data_out_get ;
  assign f_trace_data$CLR = 1'b0 ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = f_gpr_reqs$D_OUT[36:32] ;
  assign gpr_regfile$read_rs1_rs1 = _theResult____h4950[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = _theResult____h4950[24:20] ;
  always@(MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_f_trace_data$enq_1__SEL_3 or
	  rg_trap_instr or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  f_gpr_reqs$D_OUT or
	  MUX_gpr_regfile$write_rd_1__SEL_1 or stage3_rg_stage3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csr_regfile$mav_csr_write_1__SEL_1 || MUX_f_trace_data$enq_1__SEL_3:
	  gpr_regfile$write_rd_rd = rg_trap_instr[11:7];
      WILL_FIRE_RL_rl_debug_write_gpr:
	  gpr_regfile$write_rd_rd = f_gpr_reqs$D_OUT[36:32];
      MUX_gpr_regfile$write_rd_1__SEL_1:
	  gpr_regfile$write_rd_rd = stage3_rg_stage3[68:64];
      default: gpr_regfile$write_rd_rd = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_gpr_regfile$write_rd_1__SEL_1 or
	  stage3_rg_stage3 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_gpr_regfile$write_rd_2__VAL_2 or
	  MUX_f_trace_data$enq_1__SEL_3 or
	  WILL_FIRE_RL_rl_debug_write_gpr or
	  MUX_gpr_regfile$write_rd_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_gpr_regfile$write_rd_1__SEL_1:
	  gpr_regfile$write_rd_rd_val = stage3_rg_stage3[63:0];
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  gpr_regfile$write_rd_rd_val = MUX_gpr_regfile$write_rd_2__VAL_2;
      MUX_f_trace_data$enq_1__SEL_3:
	  gpr_regfile$write_rd_rd_val = MUX_gpr_regfile$write_rd_2__VAL_2;
      WILL_FIRE_RL_rl_debug_write_gpr:
	  gpr_regfile$write_rd_rd_val = MUX_gpr_regfile$write_rd_2__VAL_4;
      default: gpr_regfile$write_rd_rd_val =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign gpr_regfile$write_rd_write_tag_only =
	     MUX_gpr_regfile$write_rd_1__SEL_1 &&
	     MUX_gpr_regfile$write_rd_3__VAL_1 ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[69] ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_debug_write_gpr ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bid = dmem_master_bid ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rid = dmem_master_rid ;
  assign near_mem$dmem_master_rlast = dmem_master_rlast ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h13418 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h13420[6:0] ;
  assign near_mem$dmem_req_f3 = x_out_data_to_stage2_instr__h13415[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = 1'd0 ;
  assign near_mem$dmem_req_store_value = { 32'd0, x__h24490 } ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  MUX_near_mem$imem_req_2__VAL_2 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  next_pc___1__h17115 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap_fetch or
	  MUX_near_mem$imem_req_2__VAL_5 or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  WILL_FIRE_RL_rl_debug_run or MUX_near_mem$imem_req_2__VAL_7)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      MUX_imem_rg_f3$write_1__SEL_2:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = next_pc___1__h17115;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      WILL_FIRE_RL_rl_debug_run:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      default: near_mem$imem_req_addr = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  WILL_FIRE_RL_rl_debug_run or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_trap_fetch or
	  rg_mstatus_MXR or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6 ||
      WILL_FIRE_RL_rl_debug_run:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_mstatus_MXR = rg_mstatus_MXR;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_priv =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_f3$write_1__SEL_2 ||
	      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	      WILL_FIRE_RL_rl_trap_fetch ||
	      MUX_near_mem$imem_req_1__SEL_6 ||
	      WILL_FIRE_RL_rl_debug_run) ?
	       rg_cur_priv :
	       imem_rg_priv ;
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  always@(WILL_FIRE_RL_rl_trap_fetch or
	  rg_sstatus_SUM or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  imem_rg_sstatus_SUM or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or WILL_FIRE_RL_rl_debug_run)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_sstatus_SUM = rg_sstatus_SUM;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_rg_sstatus_SUM;
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6 ||
      WILL_FIRE_RL_rl_debug_run:
	  near_mem$imem_req_sstatus_SUM = 1'd0;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$pmp_csrs_pmpaddr_read_j = 4'h0 ;
  assign near_mem$pmp_csrs_pmpaddr_write_addr = 32'h0 ;
  assign near_mem$pmp_csrs_pmpaddr_write_j = 4'h0 ;
  assign near_mem$pmp_csrs_pmpcfg_read_j = 2'h0 ;
  assign near_mem$pmp_csrs_pmpcfg_write_j = 2'h0 ;
  assign near_mem$pmp_csrs_pmpcfg_write_x = 32'h0 ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     WILL_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_debug_run ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1496 &&
	     (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	      3'd1 ||
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	      3'd2 ||
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	      3'd4) ;
  assign near_mem$EN_server_fence_i_request_put =
	     WILL_FIRE_RL_rl_stage1_stop ||
	     WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ;
  assign near_mem$EN_server_fence_i_response_get =
	     WILL_FIRE_RL_rl_BREAK_cache_flush_finish ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = CAN_FIRE_RL_rl_stage1_FENCE ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = CAN_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign near_mem$EN_pmp_csrs_pmpcfg_write = 1'b0 ;
  assign near_mem$EN_pmp_csrs_pmpaddr_write = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = x_out_data_to_stage2_instr__h13415[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 = !_theResult____h4950[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h13420 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h13421 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1496 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = WILL_FIRE_RL_rl_reset_complete ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1005 =
	     (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	      3'd1) ?
	       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1004 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002 ;
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1393 =
	     (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1371 ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1374) &&
	     (rg_stop_req || rg_step_count) ||
	     (csr_regfile$interrupt_pending[5] || csr_regfile$nmi_pending) &&
	     (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1371 ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1374) ;
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1405 =
	     (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1393 ||
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1403) &&
	     stage1_rg_full ;
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1611 =
	     rs2_val_local__h13764[31] ?
	       NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1603 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1604 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1607 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1608 ;
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1637 =
	     x__h21679[31] ?
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1624 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1625 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1633 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1634 ;
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1661 =
	     x__h21281[31] ?
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1653 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1654 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1657 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1658 ;
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1865 =
	     (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1371 ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1374) &&
	     (rg_stop_req || rg_step_count) ||
	     !csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 ;
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1866 =
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1865 ||
	     (csr_regfile$interrupt_pending[5] || csr_regfile$nmi_pending) &&
	     (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1371 ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1374) ;
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1870 =
	     (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1866 ||
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1826) &&
	     stage1_rg_full ;
  assign IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d942 =
	     (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	      3'd1) ?
	       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d885 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883 ;
  assign IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1547 =
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 ?
	       (x_3__h15373[31] ?
		  IF_NOT_NEG_SEXT_IF_NOT_near_mem_imem_pc__0_EQ__ETC___d1540 :
		  IF_NOT_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1545) :
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 ;
  assign IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1688 =
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 ?
	       (rs2_val_local__h13764[31] ?
		  IF_NOT_NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_im_ETC___d1679 :
		  IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1686) :
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 ;
  assign IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1707 =
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567 ?
	       (x__h21679[31] ?
		  IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1698 :
		  IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1705) :
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693 ;
  assign IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1723 =
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 ?
	       (x__h21108[31] ?
		  IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1715 :
		  IF_NOT_NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_im_ETC___d1721) :
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 ;
  assign IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1737 =
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567 ?
	       (x__h21281[31] ?
		  IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1729 :
		  IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1735) :
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1200 =
	     ((_theResult____h4950[6:0] == 7'b0010011 ||
	       _theResult____h4950[6:0] == 7'b0110011) &&
	      (_theResult____h4950[14:12] == 3'b001 ||
	       _theResult____h4950[14:12] == 3'b101)) ?
	       rd_val__h13725 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1199 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1526 =
	     (_theResult____h4950[6:0] == 7'b1100111) ?
	       _theResult____h4950[19:15] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500 &&
	       (IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1511 ||
		IF_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg__ETC___d1516) :
	       CASE_theResult__950_BITS_6_TO_0_0b11_NOT_IF_NO_ETC__q26 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1556 =
	     (_theResult____h4950[19:15] == 5'd0) ?
	       30'd0 :
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1586 =
	     IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1585 ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567 :
	       _theResult____h4950[19:15] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 ||
	       _theResult____h4950[24:20] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1595 =
	     ((_theResult____h4950[6:0] == 7'b0010011 ||
	       _theResult____h4950[6:0] == 7'b0110011) &&
	      (_theResult____h4950[14:12] == 3'b001 ||
	       _theResult____h4950[14:12] == 3'b101)) ?
	       _theResult____h4950[19:15] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 ||
	       _theResult____h4950[24:20] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567 :
	       (_theResult____h4950[6:0] == 7'b0010011 ||
		_theResult____h4950[6:0] == 7'b0110011) &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1593 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1607 =
	     rs2_val_local__h13764 < y__h15441 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1624 =
	     x__h21281 < y__h21282 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1633 =
	     x__h21679 < y__h21234 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1642 =
	     rs2_val_local__h13764 < y__h15489 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1653 =
	     x__h21679 < y__h21282 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1657 =
	     x__h21281 < y__h21234 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1666 =
	     (_theResult____h4950[14:12] == 3'b0 &&
	      (_theResult____h4950[6:0] != 7'b0110011 ||
	       !_theResult____h4950[30])) ?
	       IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1640 :
	       _theResult____h4950[14:12] == 3'b0 &&
	       _theResult____h4950[6:0] == 7'b0110011 &&
	       _theResult____h4950[30] &&
	       IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1664 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1669 =
	     (_theResult____h4950[6:0] == 7'b0110011 &&
	      _theResult____h4950[31:25] == 7'b0000001) ?
	       _theResult____h4950[19:15] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500 :
	       _theResult____h4950[14:12] != 3'b001 &&
	       _theResult____h4950[14:12] != 3'b101 &&
	       (_theResult____h4950[6:0] == 7'b0010011 ||
		_theResult____h4950[6:0] == 7'b0110011) &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1666 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1741 =
	     (_theResult____h4950[14:12] == 3'b0 &&
	      (_theResult____h4950[6:0] != 7'b0110011 ||
	       !_theResult____h4950[30])) ?
	       IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1709 :
	       ((_theResult____h4950[14:12] == 3'b0 &&
		 _theResult____h4950[6:0] == 7'b0110011 &&
		 _theResult____h4950[30]) ?
		  IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1739 :
		  30'd0) ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1744 =
	     (_theResult____h4950[6:0] == 7'b0110011 &&
	      _theResult____h4950[31:25] == 7'b0000001) ?
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1556 :
	       (((_theResult____h4950[6:0] == 7'b0010011 ||
		  _theResult____h4950[6:0] == 7'b0110011) &&
		 (_theResult____h4950[14:12] == 3'b001 ||
		  _theResult____h4950[14:12] == 3'b101)) ?
		  30'd0 :
		  CASE_theResult__950_BITS_6_TO_0_0b10011_IF_IF__ETC__q27) ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1778 =
	     ((_theResult____h4950[6:0] == 7'b0010011 ||
	       _theResult____h4950[6:0] == 7'b0110011) &&
	      (_theResult____h4950[14:12] == 3'b001 ||
	       _theResult____h4950[14:12] == 3'b101)) ?
	       rd_val__h13725 :
	       CASE_theResult__950_BITS_6_TO_0_0b10011_rd_val_ETC__q28 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d602 =
	     (_theResult____h4950[6:0] == 7'b1100111) ?
	       _theResult____h4950[19:15] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 :
	       CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d674 =
	     (_theResult____h4950[6:0] == 7'b1100111) ?
	       _theResult____h4950[19:15] == 5'd0 ||
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d620 ||
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 &&
	       IF_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg__ETC___d660 :
	       CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_ne_ETC__q10 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d748 =
	     (_theResult____h4950[14:12] == 3'b0) ?
	       _theResult____h4950[11:7] == 5'd0 &&
	       _theResult____h4950[19:15] == 5'd0 &&
	       _theResult____h4950[31:20] != 12'b0 &&
	       _theResult____h4950[31:20] != 12'b000000000001 &&
	       (rg_cur_priv == 2'b11 &&
		_theResult____h4950[31:20] == 12'b001100000010 ||
		rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_EQ_0_ETC___d740) :
	       _theResult____h4950[14:12] == 3'b001 ||
	       _theResult____h4950[14:12] == 3'b101 ||
	       _theResult____h4950[14:12] == 3'b010 ||
	       _theResult____h4950[14:12] == 3'b110 ||
	       _theResult____h4950[14:12] == 3'b011 ||
	       _theResult____h4950[14:12] == 3'b111 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d779 =
	     ((_theResult____h4950[6:0] == 7'b0010011 ||
	       _theResult____h4950[6:0] == 7'b0110011) &&
	      (_theResult____h4950[14:12] == 3'b001 ||
	       _theResult____h4950[14:12] == 3'b101)) ?
	       !_theResult____h4950[25] :
	       CASE_theResult__950_BITS_6_TO_0_0b10011_IF_NOT_ETC__q11 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d835 =
	     (_theResult____h4950[14:12] == 3'b0) ?
	       _theResult____h4950[11:7] != 5'd0 ||
	       _theResult____h4950[19:15] != 5'd0 ||
	       _theResult____h4950[31:20] == 12'b0 ||
	       _theResult____h4950[31:20] == 12'b000000000001 ||
	       (rg_cur_priv != 2'b11 ||
		_theResult____h4950[31:20] != 12'b001100000010) &&
	       NOT_rg_cur_priv_5_EQ_0b11_22_10_AND_NOT_rg_cur_ETC___d826 :
	       _theResult____h4950[14:12] != 3'b001 &&
	       _theResult____h4950[14:12] != 3'b101 &&
	       _theResult____h4950[14:12] != 3'b010 &&
	       _theResult____h4950[14:12] != 3'b110 &&
	       _theResult____h4950[14:12] != 3'b011 &&
	       _theResult____h4950[14:12] != 3'b111 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d865 =
	     ((_theResult____h4950[6:0] == 7'b0010011 ||
	       _theResult____h4950[6:0] == 7'b0110011) &&
	      (_theResult____h4950[14:12] == 3'b001 ||
	       _theResult____h4950[14:12] == 3'b101)) ?
	       _theResult____h4950[25] :
	       CASE_theResult__950_BITS_6_TO_0_0b10011_NOT_IF_ETC__q12 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883 =
	     (_theResult____h4950[6:0] == 7'b1100011) ?
	       _theResult____h4950[14:12] == 3'b0 ||
	       _theResult____h4950[14:12] == 3'b001 ||
	       _theResult____h4950[14:12] == 3'b100 ||
	       _theResult____h4950[14:12] == 3'b101 ||
	       _theResult____h4950[14:12] == 3'b110 ||
	       _theResult____h4950[14:12] == 3'b111 :
	       _theResult____h4950[6:0] == 7'b1101111 ||
	       _theResult____h4950[6:0] == 7'b1100111 ||
	       _theResult____h4950[6:0] == 7'b0110011 &&
	       _theResult____h4950[31:25] == 7'b0000001 ||
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d779 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d891 =
	     ((_theResult____h4950[6:0] == 7'b0010011 ||
	       _theResult____h4950[6:0] == 7'b0110011) &&
	      (_theResult____h4950[14:12] == 3'b001 ||
	       _theResult____h4950[14:12] == 3'b101)) ?
	       _theResult____h4950[25] :
	       CASE_theResult__950_BITS_6_TO_0_0b10011_NOT_IF_ETC__q14 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d916 =
	     x__h21679 == rs2_val__h13530 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d918 =
	     (x__h21679 ^ 32'h80000000) < (rs2_val__h13530 ^ 32'h80000000) ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d920 =
	     x__h21679 < rs2_val__h13530 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930 =
	     (_theResult____h4950[6:0] == 7'b1100011) ?
	       _theResult____h4950[14:12] != 3'b0 &&
	       _theResult____h4950[14:12] != 3'b001 &&
	       _theResult____h4950[14:12] != 3'b100 &&
	       _theResult____h4950[14:12] != 3'b101 &&
	       _theResult____h4950[14:12] != 3'b110 &&
	       _theResult____h4950[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 :
	       _theResult____h4950[6:0] == 7'b1101111 ||
	       _theResult____h4950[6:0] == 7'b1100111 ||
	       (_theResult____h4950[6:0] != 7'b0110011 ||
		_theResult____h4950[31:25] != 7'b0000001) &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d891 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939 =
	     (_theResult____h4950[6:0] == 7'b1100011) ?
	       _theResult____h4950[14:12] != 3'b0 &&
	       _theResult____h4950[14:12] != 3'b001 &&
	       _theResult____h4950[14:12] != 3'b100 &&
	       _theResult____h4950[14:12] != 3'b101 &&
	       _theResult____h4950[14:12] != 3'b110 &&
	       _theResult____h4950[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d936 :
	       _theResult____h4950[6:0] != 7'b1101111 &&
	       _theResult____h4950[6:0] != 7'b1100111 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d959 =
	     ((_theResult____h4950[6:0] == 7'b0010011 ||
	       _theResult____h4950[6:0] == 7'b0110011) &&
	      (_theResult____h4950[14:12] == 3'b001 ||
	       _theResult____h4950[14:12] == 3'b101)) ?
	       !_theResult____h4950[25] :
	       CASE_theResult__950_BITS_6_TO_0_0b10011_IF_NOT_ETC__q17 ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 =
	     (_theResult____h4950[6:0] == 7'b1100011) ?
	       (_theResult____h4950[14:12] == 3'b0 ||
		_theResult____h4950[14:12] == 3'b001 ||
		_theResult____h4950[14:12] == 3'b100 ||
		_theResult____h4950[14:12] == 3'b101 ||
		_theResult____h4950[14:12] == 3'b110 ||
		_theResult____h4950[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d936 :
	       _theResult____h4950[6:0] != 7'b1101111 &&
	       _theResult____h4950[6:0] != 7'b1100111 &&
	       (_theResult____h4950[6:0] == 7'b0110011 &&
		_theResult____h4950[31:25] == 7'b0000001 ||
		IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d959) ;
  assign IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968 =
	     (_theResult____h4950[6:0] == 7'b1100011) ?
	       (_theResult____h4950[14:12] == 3'b0 ||
		_theResult____h4950[14:12] == 3'b001 ||
		_theResult____h4950[14:12] == 3'b100 ||
		_theResult____h4950[14:12] == 3'b101 ||
		_theResult____h4950[14:12] == 3'b110 ||
		_theResult____h4950[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 :
	       _theResult____h4950[6:0] == 7'b1101111 ||
	       _theResult____h4950[6:0] == 7'b1100111 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1498 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1499 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1511 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1507 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1510 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1531 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1534 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d582 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1566 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1572 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1507 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1571 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1577 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d614 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1576 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1583 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1498 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1582 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1531 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1692 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d582 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d588 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d620 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) ?
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d614 :
	       IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d619 ;
  assign IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d906 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) ?
	       x_out_bypass_rd_val_data__h7689 :
	       val_data__h14942 ;
  assign IF_NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1650 =
	     x__h21108[31] ?
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1642 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1643 :
	       NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1646 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1647 ;
  assign IF_NOT_0_CONCAT_IF_NOT_near_mem_imem_pc__0_EQ__ETC___d1553 =
	     (!_0_CONCAT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d664 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d666) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 :
	       { x_8_ptr_pos_size__h15740, x_8_ptr_neg_size__h15741 } ;
  assign IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1686 =
	     (!IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1607 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1608) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 :
	       { x_8_ptr_pos_size__h21090, x_8_ptr_neg_size__h21091 } ;
  assign IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1698 =
	     (!IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1624 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1625) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693 :
	       { x_14_ptr_pos_size__h21327, x_14_ptr_neg_size__h21328 } ;
  assign IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1705 =
	     (!IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1633 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1634) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693 :
	       { x_8_ptr_pos_size__h21263, x_8_ptr_neg_size__h21264 } ;
  assign IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1715 =
	     (!IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1642 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1643) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 :
	       { x_14_ptr_pos_size__h21551, x_14_ptr_neg_size__h21552 } ;
  assign IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1729 =
	     (!IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1653 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1654) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693 :
	       { x_14_ptr_pos_size__h21725, x_14_ptr_neg_size__h21726 } ;
  assign IF_NOT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1735 =
	     (!IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1657 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1658) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693 :
	       { x_8_ptr_pos_size__h21661, x_8_ptr_neg_size__h21662 } ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1555 =
	     (_theResult____h4950[19:15] != 5'd0 &&
	      IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500) ?
	       (IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 ?
		  IF_NOT_0_CONCAT_IF_NOT_near_mem_imem_pc__0_EQ__ETC___d1553 :
		  IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535) :
	       30'd0 ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1640 =
	     NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1579 ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1511 ||
	       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1611 :
	       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1585 &&
	       (IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1572 ||
		IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1637) ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1664 =
	     NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1579 ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1511 ||
	       IF_NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_r_ETC___d1650 :
	       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1585 &&
	       (IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1572 ||
		IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1661) ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1709 =
	     NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1579 ?
	       IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1688 :
	       (IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1585 ?
		  IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1707 :
		  30'd0) ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1739 =
	     NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1579 ?
	       IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1723 :
	       (IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1585 ?
		  IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1737 :
		  30'd0) ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d978 =
	     NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d795 ?
	       4'd12 :
	       4'd1 ;
  assign IF_NOT_NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_im_ETC___d1679 =
	     (!NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1603 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1604) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 :
	       { x_14_ptr_pos_size__h21152, x_14_ptr_neg_size__h21153 } ;
  assign IF_NOT_NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_im_ETC___d1721 =
	     (!NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1646 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1647) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 :
	       { x_8_ptr_pos_size__h21489, x_8_ptr_neg_size__h21490 } ;
  assign IF_NOT_NEG_SEXT_IF_NOT_near_mem_imem_pc__0_EQ__ETC___d1540 =
	     (!NEG_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d640 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d642) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 :
	       { x_14_ptr_pos_size__h15532, x_14_ptr_neg_size__h15533 } ;
  assign IF_NOT_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1545 =
	     (!SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc__ETC___d656 &&
	      _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d658) ?
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1535 :
	       { x_8_ptr_pos_size__h15470, x_8_ptr_neg_size__h15471 } ;
  assign IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d203 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       IF_stage2_rg_stage2_15_BITS_430_TO_426_75_EQ_0_ETC___d202 :
	       2'd0 ;
  assign IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d223 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       stage2_rg_stage2[430:426] == 5'd0 && stage2_rg_stage2[297] :
	       stage2_rg_stage2[297] ;
  assign IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d227 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       stage2_rg_stage2[430:426] == 5'd0 && stage2_rg_stage2[296] :
	       stage2_rg_stage2[296] ;
  assign IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d231 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       ((stage2_rg_stage2[430:426] == 5'd0) ?
		  stage2_rg_stage2[295:266] :
		  30'd0) :
	       stage2_rg_stage2[295:266] ;
  assign IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1134 =
	     NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d250 ?
	       next_pc___1__h17115 :
	       next_pc__h17113 ;
  assign IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1585 =
	     (_theResult____h4950[19:15] == 5'd0 ||
	      IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1511 ||
	      IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d620) &&
	     _theResult____h4950[24:20] != 5'd0 &&
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1583 ;
  assign IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1752 =
	     { _theResult____h4950[6:0] == 7'b0110011 &&
	       _theResult____h4950[31:25] == 7'b0000001 &&
	       _theResult____h4950[24:20] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567,
	       _theResult____h4950[6:0] == 7'b0110011 &&
	       _theResult____h4950[31:25] == 7'b0000001 &&
	       _theResult____h4950[24:20] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1583,
	       CASE_theResult__950_BITS_6_TO_0_0b1100011_0_0b_ETC__q29 } ;
  assign IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d669 =
	     _theResult____h4950[19:15] == 5'd0 ||
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d620 ||
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 &&
	     !_0_CONCAT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d664 &&
	     _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d666 ;
  assign IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d704 =
	     _theResult____h4950[14:12] == 3'b0 &&
	     (_theResult____h4950[6:0] != 7'b0110011 ||
	      !_theResult____h4950[30]) ||
	     _theResult____h4950[14:12] == 3'b0 &&
	     _theResult____h4950[6:0] == 7'b0110011 &&
	     _theResult____h4950[30] ||
	     _theResult____h4950[14:12] == 3'b010 ||
	     _theResult____h4950[14:12] == 3'b011 ||
	     _theResult____h4950[14:12] == 3'b100 ||
	     _theResult____h4950[14:12] == 3'b110 ||
	     _theResult____h4950[14:12] == 3'b111 ;
  assign IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d772 =
	     _theResult____h4950[6:0] == 7'b0101111 &&
	     (_theResult____h4950[31:27] == 5'b00010 ||
	      _theResult____h4950[31:27] == 5'b00011 ||
	      _theResult____h4950[31:27] == 5'b0 ||
	      _theResult____h4950[31:27] == 5'b00001 ||
	      _theResult____h4950[31:27] == 5'b01100 ||
	      _theResult____h4950[31:27] == 5'b01000 ||
	      _theResult____h4950[31:27] == 5'b00100 ||
	      _theResult____h4950[31:27] == 5'b10000 ||
	      _theResult____h4950[31:27] == 5'b11000 ||
	      _theResult____h4950[31:27] == 5'b10100 ||
	      _theResult____h4950[31:27] == 5'b11100) &&
	     _theResult____h4950[14:12] == 3'b010 ;
  assign IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d866 =
	     _theResult____h4950[6:0] == 7'b1100111 ||
	     _theResult____h4950[6:0] == 7'b0110011 &&
	     _theResult____h4950[31:25] == 7'b0000001 ||
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d779 ||
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d865 ;
  assign IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 =
	     near_mem$imem_exc ?
	       4'd12 :
	       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1013 ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1499 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509) ?
	       stage3_rg_stage3[30] :
	       gpr_regfile$read_rs1[30] ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1510 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509) ?
	       !stage3_rg_stage3[31] :
	       !gpr_regfile$read_rs1[31] ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1534 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509) ?
	       stage3_rg_stage3[29:0] :
	       gpr_regfile$read_rs1[29:0] ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1566 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515) ?
	       stage3_rg_stage3[31] :
	       gpr_regfile$read_rs2[31] ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1571 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515) ?
	       !stage3_rg_stage3[31] :
	       !gpr_regfile$read_rs2[31] ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1576 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515) ?
	       !stage3_rg_stage3[30] :
	       !gpr_regfile$read_rs2[30] ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1582 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515) ?
	       stage3_rg_stage3[30] :
	       gpr_regfile$read_rs2[30] ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d1692 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515) ?
	       stage3_rg_stage3[29:0] :
	       gpr_regfile$read_rs2[29:0] ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d588 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509) ?
	       stage3_rg_stage3[31] :
	       gpr_regfile$read_rs1[31] ;
  assign IF_NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0_ETC___d619 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509) ?
	       !stage3_rg_stage3[30] :
	       !gpr_regfile$read_rs1[30] ;
  assign IF_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg__ETC___d1516 =
	     x_3__h15373[31] ?
	       NEG_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d640 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d642 :
	       SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc__ETC___d656 ||
	       !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d658 ;
  assign IF_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg__ETC___d660 =
	     x_3__h15373[31] ?
	       !NEG_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d640 &&
	       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d642 :
	       !SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc__ETC___d656 &&
	       _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d658 ;
  assign IF_csr_regfile_read_csr_rg_trap_instr_025_BITS_ETC___d2079 =
	     csr_regfile$read_csr[31:0] | rs1_val__h27594 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d482 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:10] == 6'b100011 &&
	      instr__h4948[6:5] == 2'b0) ?
	       instr__h12901 :
	       ((csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b10 &&
		 instr__h4948[15:12] == 4'b1001 &&
		 instr__h4948[11:7] == 5'd0 &&
		 instr__h4948[6:2] == 5'd0) ?
		  instr__h13239 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d484 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:10] == 6'b100011 &&
	      instr__h4948[6:5] == 2'b10) ?
	       instr__h12629 :
	       ((csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
		 instr__h4948[15:10] == 6'b100011 &&
		 instr__h4948[6:5] == 2'b01) ?
		  instr__h12765 :
		  IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d482) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d486 =
	     (csr_regfile_read_misa__2_BIT_2_57_AND_IF_near__ETC___d353 &&
	      instr__h4948[6:2] != 5'd0) ?
	       instr__h12398 :
	       ((csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
		 instr__h4948[15:10] == 6'b100011 &&
		 instr__h4948[6:5] == 2'b11) ?
		  instr__h12493 :
		  IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d484) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d487 =
	     (csr_regfile_read_misa__2_BIT_2_57_AND_IF_near__ETC___d347 &&
	      instr__h4948[6:2] != 5'd0) ?
	       instr__h12279 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d486 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d489 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b100 &&
	      instr__h4948[11:10] == 2'b01 &&
	      imm6__h10425 != 6'd0 &&
	      !instr__h4948[12]) ?
	       instr__h11984 :
	       ((csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
		 instr__h4948[15:13] == 3'b100 &&
		 instr__h4948[11:10] == 2'b10) ?
		  instr__h12101 :
		  IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d487) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d490 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b100 &&
	      instr__h4948[11:10] == 2'b0 &&
	      imm6__h10425 != 6'd0 &&
	      !instr__h4948[12]) ?
	       instr__h11791 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d489 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d491 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b10 &&
	      instr__h4948[15:13] == 3'b0 &&
	      instr__h4948[11:7] != 5'd0 &&
	      imm6__h10425 != 6'd0 &&
	      !instr__h4948[12]) ?
	       instr__h11598 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d490 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d493 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b011 &&
	      instr__h4948[11:7] == 5'd2 &&
	      nzimm10__h11049 != 10'd0) ?
	       instr__h11253 :
	       ((csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b0 &&
		 instr__h4948[15:13] == 3'b0 &&
		 nzimm10__h11264 != 10'd0) ?
		  instr__h11425 :
		  IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d491) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d494 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b0 &&
	      instr__h4948[11:7] != 5'd0 &&
	      imm6__h10425 != 6'd0 ||
	      csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b0 &&
	      instr__h4948[11:7] == 5'd0 &&
	      imm6__h10425 == 6'd0) ?
	       instr__h10816 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d493 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d495 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b011 &&
	      instr__h4948[11:7] != 5'd0 &&
	      instr__h4948[11:7] != 5'd2 &&
	      imm6__h10425 != 6'd0) ?
	       instr__h10687 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d494 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d497 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b111) ?
	       instr__h10165 :
	       ((csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
		 instr__h4948[15:13] == 3'b010 &&
		 instr__h4948[11:7] != 5'd0) ?
		  instr__h10503 :
		  IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d495) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d498 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b110) ?
	       instr__h9848 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d497 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d499 =
	     (csr_regfile_read_misa__2_BIT_2_57_AND_IF_near__ETC___d353 &&
	      instr__h4948[6:2] == 5'd0) ?
	       instr__h9783 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d498 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d500 =
	     (csr_regfile_read_misa__2_BIT_2_57_AND_IF_near__ETC___d347 &&
	      instr__h4948[6:2] == 5'd0) ?
	       instr__h9667 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d499 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d501 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b001) ?
	       instr__h9277 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d500 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d502 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b01 &&
	      instr__h4948[15:13] == 3'b101) ?
	       instr__h8934 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d501 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d503 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b0 &&
	      instr__h4948[15:13] == 3'b110) ?
	       instr__h8705 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d502 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d504 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b0 &&
	      instr__h4948[15:13] == 3'b010) ?
	       instr__h8510 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d503 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d505 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b10 &&
	      instr__h4948[15:13] == 3'b110) ?
	       instr__h8318 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d504 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1004 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883 ?
		  4'd12 :
		  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002) :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1007 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d942 ?
		  4'd12 :
		  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1005) :
	       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1005 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1010 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d886 ?
		  4'd12 :
		  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1008) :
	       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1008 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1012 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       (IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d884 ?
		  4'd12 :
		  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1010) :
	       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1010 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1346 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       _theResult____h4950[6:0] != 7'b1100111 &&
	       (_theResult____h4950[6:0] != 7'b0110011 ||
		_theResult____h4950[31:25] != 7'b0000001) &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d865 &&
	       (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 ||
		IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968) :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 ||
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1373 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       _theResult____h4950[6:0] == 7'b1100111 ||
	       _theResult____h4950[6:0] == 7'b0110011 &&
	       _theResult____h4950[31:25] == 7'b0000001 ||
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d779 ||
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d891 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930 &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d884 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d872 &&
	       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d876 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d885 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d875 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d941 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d884 ||
	       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d886 ||
	       _0_OR_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d894 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930 &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d944 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d942 ||
	       _0_OR_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d894 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930 &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d946 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883 ||
	       _0_OR_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d894 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930 &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939 ;
  assign IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d970 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       _theResult____h4950[6:0] != 7'b1100111 &&
	       (_theResult____h4950[6:0] != 7'b0110011 ||
		_theResult____h4950[31:25] != 7'b0000001) &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d865 &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d959 :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 ||
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968 ;
  assign IF_near_mem_dmem_valid__36_THEN_IF_near_mem_dm_ETC___d139 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_near_mem_imem_exc__44_THEN_near_mem_imem_ex_ETC___d1995 =
	     near_mem$imem_exc ?
	       { near_mem$imem_exc_code, imem_rg_tval } :
	       { _theResult_____2_snd_fst_exc_code__h16958,
		 _theResult_____2_snd_fst_tval__h16959 } ;
  assign IF_rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_E_ETC___d984 =
	     ((rg_cur_priv == 2'b11 ||
	       rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	      _theResult____h4950[31:20] == 12'b000100000010) ?
	       4'd9 :
	       (rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_EQ_0_ETC___d739 ?
		  4'd11 :
		  4'd12) ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q1 :
	       2'd0 ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1498 =
	     (stage2_rg_stage2[433:431] == 3'd0) ?
	       stage2_rg_stage2[296] :
	       (stage2_rg_stage2[433:431] == 3'd1 ||
		stage2_rg_stage2[433:431] == 3'd4) &&
	       IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d227 ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1507 =
	     (stage2_rg_stage2[433:431] == 3'd0) ?
	       !stage2_rg_stage2[297] :
	       stage2_rg_stage2[433:431] != 3'd1 &&
	       stage2_rg_stage2[433:431] != 3'd4 ||
	       ((!near_mem$dmem_valid || !near_mem$dmem_exc) ?
		  stage2_rg_stage2[430:426] != 5'd0 ||
		  !stage2_rg_stage2[297] :
		  !stage2_rg_stage2[297]) ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q2 :
	       2'd0 ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511 =
	     x_out_bypass_rd__h7611 == _theResult____h4950[19:15] ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517 =
	     x_out_bypass_rd__h7611 == _theResult____h4950[24:20] ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d582 =
	     (stage2_rg_stage2[433:431] == 3'd0) ?
	       stage2_rg_stage2[297] :
	       (stage2_rg_stage2[433:431] == 3'd1 ||
		stage2_rg_stage2[433:431] == 3'd4) &&
	       IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d223 ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d614 =
	     (stage2_rg_stage2[433:431] == 3'd0) ?
	       !stage2_rg_stage2[296] :
	       stage2_rg_stage2[433:431] != 3'd1 &&
	       stage2_rg_stage2[433:431] != 3'd4 ||
	       ((!near_mem$dmem_valid || !near_mem$dmem_exc) ?
		  stage2_rg_stage2[430:426] != 5'd0 ||
		  !stage2_rg_stage2[296] :
		  !stage2_rg_stage2[296]) ;
  assign IF_stage2_rg_stage2_15_BITS_430_TO_426_75_EQ_0_ETC___d202 =
	     (stage2_rg_stage2[430:426] == 5'd0) ?
	       2'd0 :
	       ((near_mem$dmem_valid && !near_mem$dmem_exc) ? 2'd2 : 2'd1) ;
  assign IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d1453 =
	     { CASE_stage2_rg_stage2_BITS_433_TO_431_1_near_m_ETC__q22,
	       (stage2_rg_stage2[433:431] == 3'd1 ||
		stage2_rg_stage2[433:431] == 3'd4) &&
	       stage2_rg_stage2[448:446] == 3'b111 &&
	       near_mem$dmem_word64[31],
	       (stage2_rg_stage2[433:431] == 3'd1 ||
		stage2_rg_stage2[433:431] == 3'd4) &&
	       stage2_rg_stage2[448:446] == 3'b111 &&
	       near_mem$dmem_word64[30],
	       CASE_stage2_rg_stage2_BITS_433_TO_431_1_IF_sta_ETC__q23 } ;
  assign IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d236 =
	     { CASE_stage2_rg_stage2_BITS_433_TO_431_1_output_ETC__q24,
	       (stage2_rg_stage2[433:431] == 3'd1 ||
		stage2_rg_stage2[433:431] == 3'd4) &&
	       IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d223,
	       (stage2_rg_stage2[433:431] == 3'd1 ||
		stage2_rg_stage2[433:431] == 3'd4) &&
	       IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d227,
	       CASE_stage2_rg_stage2_BITS_433_TO_431_1_IF_NOT_ETC__q25 } ;
  assign IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_3_ETC___d142 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign IF_stage2_rg_stage2_15_BITS_448_TO_446_439_EQ__ETC___d1449 =
	     (stage2_rg_stage2[448:446] == 3'b111) ?
	       near_mem$dmem_word64[29:0] :
	       { 27'd0, stage2_rg_stage2[448:446] } ;
  assign IF_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11__ETC___d101 =
	     (stage3_rg_stage3[78:72] == 7'b0000011 &&
	      stage3_rg_stage3[86:84] == 3'b111) ?
	       !stage3_rg_full :
	       !stage3_rg_full || !stage3_rg_stage3[69] ;
  assign IF_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11__ETC___d105 =
	     (stage3_rg_stage3[78:72] == 7'b0000011 &&
	      stage3_rg_stage3[86:84] == 3'b111) ?
	       stage3_rg_full :
	       stage3_rg_full && stage3_rg_stage3[69] ;
  assign NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1603 =
	     x__h21108 < y__h15489 ;
  assign NEG_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1646 =
	     x__h21108 < y__h15441 ;
  assign NEG_SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d640 =
	     x__h15488 < y__h15489 ;
  assign NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1522 =
	     _theResult____h4950[19:15] != 5'd0 &&
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500 &&
	     (IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1511 ||
	      _0_CONCAT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d664 ||
	      !_0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d666) ;
  assign NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1563 =
	     { _theResult____h4950[6:0] != 7'b1100011 &&
	       _theResult____h4950[6:0] != 7'b1101111 &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1526,
	       CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_IF_ETC__q31 } ;
  assign NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1579 =
	     _theResult____h4950[19:15] != 5'd0 &&
	     IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500 &&
	     (_theResult____h4950[24:20] == 5'd0 ||
	      IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1572 ||
	      IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1577) ;
  assign NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1746 =
	     { _theResult____h4950[6:0] != 7'b1100011 &&
	       _theResult____h4950[6:0] != 7'b1101111 &&
	       _theResult____h4950[6:0] != 7'b1100111 &&
	       ((_theResult____h4950[6:0] == 7'b0110011 &&
		 _theResult____h4950[31:25] == 7'b0000001) ?
		  _theResult____h4950[19:15] != 5'd0 &&
		  IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 :
		  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1595),
	       _theResult____h4950[6:0] != 7'b1100011 &&
	       _theResult____h4950[6:0] != 7'b1101111 &&
	       _theResult____h4950[6:0] != 7'b1100111 &&
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1669,
	       CASE_theResult__950_BITS_6_TO_0_0b1100011_0_0b_ETC__q30 } ;
  assign NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d795 =
	     (_theResult____h4950[14:12] != 3'b0 ||
	      _theResult____h4950[6:0] == 7'b0110011 &&
	      _theResult____h4950[30]) &&
	     (_theResult____h4950[14:12] != 3'b0 ||
	      _theResult____h4950[6:0] != 7'b0110011 ||
	      !_theResult____h4950[30]) &&
	     _theResult____h4950[14:12] != 3'b010 &&
	     _theResult____h4950[14:12] != 3'b011 &&
	     _theResult____h4950[14:12] != 3'b100 &&
	     _theResult____h4950[14:12] != 3'b110 &&
	     _theResult____h4950[14:12] != 3'b111 ;
  assign NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d858 =
	     _theResult____h4950[6:0] != 7'b0101111 ||
	     _theResult____h4950[31:27] != 5'b00010 &&
	     _theResult____h4950[31:27] != 5'b00011 &&
	     _theResult____h4950[31:27] != 5'b0 &&
	     _theResult____h4950[31:27] != 5'b00001 &&
	     _theResult____h4950[31:27] != 5'b01100 &&
	     _theResult____h4950[31:27] != 5'b01000 &&
	     _theResult____h4950[31:27] != 5'b00100 &&
	     _theResult____h4950[31:27] != 5'b10000 &&
	     _theResult____h4950[31:27] != 5'b11000 &&
	     _theResult____h4950[31:27] != 5'b10100 &&
	     _theResult____h4950[31:27] != 5'b11100 ||
	     _theResult____h4950[14:12] != 3'b010 ;
  assign NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d875 =
	     _theResult____h4950[6:0] != 7'b1100111 &&
	     (_theResult____h4950[6:0] != 7'b0110011 ||
	      _theResult____h4950[31:25] != 7'b0000001) &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d865 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d779 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47 =
	     cur_verbosity__h3467 > 4'd1 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1833 =
	     !csr_regfile$interrupt_pending[5] && !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1826) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1828) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1856 =
	     !csr_regfile$interrupt_pending[5] && !csr_regfile$nmi_pending ||
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1885 =
	     !csr_regfile$interrupt_pending[5] && !csr_regfile$nmi_pending ||
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 ;
  assign NOT_near_mem_imem_exc__44_53_AND_IF_IF_IF_NOT__ETC___d1087 =
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd10 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd11 ;
  assign NOT_near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_ETC___d2179 =
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     f_run_halt_rsps$FULL_N &&
	     f_run_halt_reqs$EMPTY_N ;
  assign NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d250 =
	     !near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5___d242 &&
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d255 =
	     NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d250 &&
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] == 2'b11) &&
	     (!near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1403 =
	     !near_mem$imem_valid ||
	     !near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5___d242 ||
	     stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d513 ||
	     stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d519 ||
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 ;
  assign NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1415 =
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d255 ||
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	     2'd1 &&
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511 ||
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ;
  assign NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1826 =
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d255 ||
	     stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d513 ||
	     stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d519 ||
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 ;
  assign NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1828 =
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d255 ||
	     stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d513 ||
	     stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d519 ||
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 ;
  assign NOT_rg_cur_priv_5_EQ_0b11_22_10_AND_NOT_rg_cur_ETC___d825 =
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[21]) &&
	     (rg_cur_priv != 2'b0 || !csr_regfile$read_misa[13]) ||
	     _theResult____h4950[31:20] != 12'b000100000101 ;
  assign NOT_rg_cur_priv_5_EQ_0b11_22_10_AND_NOT_rg_cur_ETC___d826 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[22]) ||
	      _theResult____h4950[31:20] != 12'b000100000010) &&
	     NOT_rg_cur_priv_5_EQ_0b11_22_10_AND_NOT_rg_cur_ETC___d825 ;
  assign NOT_rg_stop_req_379_421_AND_NOT_rg_step_count__ETC___d1428 =
	     !rg_stop_req && !rg_step_count &&
	     csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 &&
	     !csr_regfile$interrupt_pending[5] &&
	     !csr_regfile$nmi_pending ;
  assign NOT_rg_stop_req_379_421_AND_NOT_rg_step_count__ETC___d1434 =
	     NOT_rg_stop_req_379_421_AND_NOT_rg_step_count__ETC___d1428 ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1415 ||
	      near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402) &&
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1417 ||
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	     2'd0 ||
	     stage3_rg_full ;
  assign NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1417 =
	     !stage1_rg_full ||
	     NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1415 ||
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 ;
  assign NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1831 =
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1826) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_41_OR_NOT_near_mem_ime_ETC___d1828) ||
	     !rg_stop_req && !rg_step_count ;
  assign NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 =
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1831 &&
	     csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1833 &&
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1838 ;
  assign NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1864 =
	     NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1831 &&
	     csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1833 &&
	     (_0_OR_0_OR_near_mem_imem_exc__44_OR_IF_IF_IF_NO_ETC___d1854 &&
	      NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1856 &&
	      (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	       2'd2 ||
	       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	       2'd0) &&
	      near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1494 ||
	      !stage1_rg_full) ;
  assign NOT_stage1_rg_full_39_40_OR_near_mem_imem_vali_ETC___d1998 =
	     !stage1_rg_full ||
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 ;
  assign NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 =
	     (stage3_rg_stage3[78:72] != 7'b0000011 ||
	      stage3_rg_stage3[86:84] != 3'b111 ||
	      !stage3_rg_full ||
	      !stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509) &&
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 !=
	      2'd1 ||
	      !IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) ;
  assign NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 =
	     (stage3_rg_stage3[78:72] != 7'b0000011 ||
	      stage3_rg_stage3[86:84] != 3'b111 ||
	      !stage3_rg_full ||
	      !stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515) &&
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 !=
	      2'd1 ||
	      !IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ;
  assign SEXT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc__ETC___d656 =
	     x_3__h15373 < y__h15441 ;
  assign SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333 =
	     { {9{offset__h8881[11]}}, offset__h8881 } ;
  assign SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362 =
	     { {4{offset__h9792[8]}}, offset__h9792 } ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1604 =
	     y__h15489 < x__h21108 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1608 =
	     y__h15441 < rs2_val_local__h13764 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1625 =
	     y__h21282 < x__h21281 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1634 =
	     y__h21234 < x__h21679 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1643 =
	     y__h15489 < rs2_val_local__h13764 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1647 =
	     y__h15441 < x__h21108 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1654 =
	     y__h21282 < x__h21679 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d1658 =
	     y__h21234 < x__h21281 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d642 =
	     y__h15489 < x__h15488 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d658 =
	     y__h15441 < x_3__h15373 ;
  assign _0_CONCAT_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_ETC___d666 =
	     y__h15441 < x_3__h15657 ;
  assign _0_CONCAT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d664 =
	     x_3__h15657 < y__h15441 ;
  assign _0_OR_0_OR_near_mem_imem_exc__44_OR_IF_IF_IF_NO_ETC___d1854 =
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 ||
	     !rg_stop_req && !rg_step_count ;
  assign _0_OR_0_OR_near_mem_imem_exc__44_OR_IF_IF_IF_NO_ETC___d1858 =
	     _0_OR_0_OR_near_mem_imem_exc__44_OR_IF_IF_IF_NO_ETC___d1854 &&
	     csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1856 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1494 ;
  assign _0_OR_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_ETC___d894 =
	     (_theResult____h4950[6:0] != 7'b0110011 ||
	      _theResult____h4950[31:25] != 7'b0000001) &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d891 &&
	     _theResult____h4950[6:0] != 7'b1100111 ;
  assign _theResult_____1_fst__h16427 =
	     (_theResult____h4950[14:12] == 3'b0 &&
	      _theResult____h4950[6:0] == 7'b0110011 &&
	      _theResult____h4950[30]) ?
	       rd_val___1__h17566 :
	       _theResult_____1_fst__h16437 ;
  assign _theResult_____1_fst__h16476 = x__h21679 & rs2_val_local__h13764 ;
  assign _theResult_____1_fst_val2__h24432 =
	     (x_out_data_to_stage2_instr__h13415[14:12] == 3'b111) ?
	       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1752 :
	       x_out_data_to_stage2_val2__h13421 ;
  assign _theResult_____1_snd_fst_exc_code__h16952 =
	     IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d884 ?
	       5'd17 :
	       _theResult_____2_snd_fst_exc_code__h16949 ;
  assign _theResult_____1_snd_fst_exc_code__h16955 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       _theResult_____1_snd_fst_exc_code__h16952 :
	       _theResult_____2_snd_fst_exc_code__h16949 ;
  assign _theResult_____2_snd_fst_exc_code__h16946 =
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d886 ?
	       5'd16 :
	       _theResult_____3_snd_fst_exc_code__h16943 ;
  assign _theResult_____2_snd_fst_exc_code__h16949 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       _theResult_____2_snd_fst_exc_code__h16946 :
	       _theResult_____3_snd_fst_exc_code__h16943 ;
  assign _theResult_____2_snd_fst_tval__h16959 =
	     (_theResult____h4950[6:0] != 7'b1101111 &&
	      _theResult____h4950[6:0] != 7'b1100111 &&
	      (_theResult____h4950[6:0] != 7'b1110011 ||
	       _theResult____h4950[14:12] != 3'b0 ||
	       _theResult____h4950[11:7] != 5'd0 ||
	       _theResult____h4950[19:15] != 5'd0 ||
	       _theResult____h4950[31:20] != 12'b0 &&
	       _theResult____h4950[31:20] != 12'b000000000001)) ?
	       (near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d528 ?
		  _theResult____h4950 :
		  { 16'd0, instr__h4948[15:0] }) :
	       IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1292 ;
  assign _theResult_____3_snd_fst_exc_code__h16937 =
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d942 ?
	       5'd17 :
	       _theResult_____4_snd_fst_exc_code__h16934 ;
  assign _theResult_____3_snd_fst_exc_code__h16940 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       _theResult_____3_snd_fst_exc_code__h16937 :
	       _theResult_____4_snd_fst_exc_code__h16934 ;
  assign _theResult_____4_snd_fst_exc_code__h16928 =
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883 ?
	       5'd16 :
	       alu_outputs_exc_code__h14174 ;
  assign _theResult_____4_snd_fst_exc_code__h16931 =
	     csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 ?
	       _theResult_____4_snd_fst_exc_code__h16928 :
	       alu_outputs_exc_code__h14174 ;
  assign _theResult_____4_snd_fst_exc_code__h16934 =
	     (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	      3'd1) ?
	       _theResult_____4_snd_fst_exc_code__h16931 :
	       alu_outputs_exc_code__h14174 ;
  assign _theResult____h33240 =
	     (delta_CPI_instrs__h33239 == 64'd0) ?
	       delta_CPI_instrs___1__h33275 :
	       delta_CPI_instrs__h33239 ;
  assign _theResult____h4950 = x_out_data_to_stage2_instr__h13415 ;
  assign _theResult___fst__h17472 =
	     _theResult____h4950[30] ? rd_val__h17525 : rd_val__h17502 ;
  assign _theResult___fst__h8073 =
	     (near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 &&
	      imem_rg_pc[1:0] == 2'b0 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h8075 :
	       _theResult___fst__h8101 ;
  assign _theResult___fst__h8101 =
	     (near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 &&
	      imem_rg_pc[1:0] != 2'b0 &&
	      near_mem$imem_instr[17:16] != 2'b11) ?
	       instr_out___1__h8103 :
	       near_mem$imem_instr ;
  assign alu_outputs___1_addr__h13561 =
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 ?
	       branch_target__h13534 :
	       IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1134 ;
  assign alu_outputs___1_addr__h13591 =
	     imem_rg_pc +
	     { {11{theResult__950_BIT_31_CONCAT_theResult__950_BI_ETC__q5[20]}},
	       theResult__950_BIT_31_CONCAT_theResult__950_BI_ETC__q5 } ;
  assign alu_outputs___1_addr__h13625 = { eaddr__h13838[31:1], 1'd0 } ;
  assign alu_outputs___1_exc_code__h14123 =
	     (_theResult____h4950[14:12] == 3'b0) ?
	       ((_theResult____h4950[11:7] == 5'd0 &&
		 _theResult____h4950[19:15] == 5'd0) ?
		  CASE_theResult__950_BITS_31_TO_20_0b0_CASE_rg__ETC__q7 :
		  5'd2) :
	       5'd2 ;
  assign alu_outputs___1_trace_data_word3__h22933 = { 32'd0, eaddr__h13838 } ;
  assign alu_outputs___1_trace_data_word3__h22952 = { 32'd0, eaddr__h13863 } ;
  assign alu_outputs___1_val1__h14128 =
	     _theResult____h4950[14] ?
	       { 27'd0, _theResult____h4950[19:15] } :
	       x__h21679 ;
  assign alu_outputs___1_val1__h14154 =
	     { 25'd0, _theResult____h4950[31:25] } ;
  assign branch_target__h13534 =
	     imem_rg_pc +
	     { {19{theResult__950_BIT_31_CONCAT_theResult__950_BI_ETC__q4[12]}},
	       theResult__950_BIT_31_CONCAT_theResult__950_BI_ETC__q4 } ;
  assign cpi__h33242 = x__h33241 / 64'd10 ;
  assign cpifrac__h33243 = x__h33241 % 64'd10 ;
  assign csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 =
	     csr_regfile$csr_mip_read == rg_prev_mip ;
  assign csr_regfile_read_csr_mcycle__4_MINUS_rg_start__ETC___d2166 =
	     delta_CPI_cycles__h33238 * 64'd10 ;
  assign csr_regfile_read_misa__2_BIT_2_57_AND_IF_near__ETC___d347 =
	     csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b10 &&
	     instr__h4948[15:12] == 4'b1000 &&
	     instr__h4948[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__2_BIT_2_57_AND_IF_near__ETC___d353 =
	     csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b10 &&
	     instr__h4948[15:12] == 4'b1001 &&
	     instr__h4948[11:7] != 5'd0 ;
  assign csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF_NOT_ETC___d676 =
	     csr_regfile$read_tag_ctrl[0] &&
	     _theResult____h4950[6:0] != 7'b1100011 &&
	     _theResult____h4950[6:0] != 7'b1101111 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d602 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d674 ;
  assign cur_verbosity__h3467 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h13406 = x_out_data_to_stage2_addr__h13418 ;
  assign delta_CPI_cycles__h33238 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h33275 = delta_CPI_instrs__h33239 + 64'd1 ;
  assign delta_CPI_instrs__h33239 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign eaddr__h13838 = x__h21679 + x_3__h15373 ;
  assign eaddr__h13863 =
	     x__h21679 +
	     { {20{theResult__950_BITS_31_TO_25_CONCAT_theResult__ETC__q15[11]}},
	       theResult__950_BITS_31_TO_25_CONCAT_theResult__ETC__q15 } ;
  assign fall_through_pc__h13341 =
	     imem_rg_pc +
	     (near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d528 ?
		32'd4 :
		32'd2) ;
  assign imm12__h10427 = { {6{imm6__h10425[5]}}, imm6__h10425 } ;
  assign imm12__h11051 = { {2{nzimm10__h11049[9]}}, nzimm10__h11049 } ;
  assign imm12__h11266 = { 2'd0, nzimm10__h11264 } ;
  assign imm12__h11462 = { 7'b0, instr__h4948[6:2] } ;
  assign imm12__h11807 = { 7'b0100000, instr__h4948[6:2] } ;
  assign imm12__h8174 = { 4'd0, offset__h7944 } ;
  assign imm12__h8511 = { 5'd0, offset__h8453 } ;
  assign imm20__h10555 = { {14{imm6__h10425[5]}}, imm6__h10425 } ;
  assign imm6__h10425 = { instr__h4948[12], instr__h4948[6:2] } ;
  assign instr___1__h7906 =
	     (csr_regfile$read_misa[2] && instr__h4948[1:0] == 2'b10 &&
	      instr__h4948[11:7] != 5'd0 &&
	      instr__h4948[15:13] == 3'b010) ?
	       instr__h8173 :
	       IF_csr_regfile_read_misa__2_BIT_2_57_AND_IF_ne_ETC___d505 ;
  assign instr__h10165 =
	     { SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362[12],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362[10:5],
	       5'd0,
	       rs1__h8512,
	       3'b001,
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362[4:1],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362[11],
	       7'b1100011 } ;
  assign instr__h10503 =
	     { imm12__h10427, 8'd0, instr__h4948[11:7], 7'b0010011 } ;
  assign instr__h10687 = { imm20__h10555, instr__h4948[11:7], 7'b0110111 } ;
  assign instr__h10816 =
	     { imm12__h10427,
	       instr__h4948[11:7],
	       3'b0,
	       instr__h4948[11:7],
	       7'b0010011 } ;
  assign instr__h11253 =
	     { imm12__h11051,
	       instr__h4948[11:7],
	       3'b0,
	       instr__h4948[11:7],
	       7'b0010011 } ;
  assign instr__h11425 = { imm12__h11266, 8'd16, rd__h8513, 7'b0010011 } ;
  assign instr__h11598 =
	     { imm12__h11462,
	       instr__h4948[11:7],
	       3'b001,
	       instr__h4948[11:7],
	       7'b0010011 } ;
  assign instr__h11791 =
	     { imm12__h11462, rs1__h8512, 3'b101, rs1__h8512, 7'b0010011 } ;
  assign instr__h11984 =
	     { imm12__h11807, rs1__h8512, 3'b101, rs1__h8512, 7'b0010011 } ;
  assign instr__h12101 =
	     { imm12__h10427, rs1__h8512, 3'b111, rs1__h8512, 7'b0010011 } ;
  assign instr__h12279 =
	     { 7'b0,
	       instr__h4948[6:2],
	       8'd0,
	       instr__h4948[11:7],
	       7'b0110011 } ;
  assign instr__h12398 =
	     { 7'b0,
	       instr__h4948[6:2],
	       instr__h4948[11:7],
	       3'b0,
	       instr__h4948[11:7],
	       7'b0110011 } ;
  assign instr__h12493 =
	     { 7'b0, rd__h8513, rs1__h8512, 3'b111, rs1__h8512, 7'b0110011 } ;
  assign instr__h12629 =
	     { 7'b0, rd__h8513, rs1__h8512, 3'b110, rs1__h8512, 7'b0110011 } ;
  assign instr__h12765 =
	     { 7'b0, rd__h8513, rs1__h8512, 3'b100, rs1__h8512, 7'b0110011 } ;
  assign instr__h12901 =
	     { 7'b0100000,
	       rd__h8513,
	       rs1__h8512,
	       3'b0,
	       rs1__h8512,
	       7'b0110011 } ;
  assign instr__h13239 =
	     { 12'b000000000001,
	       instr__h4948[11:7],
	       3'b0,
	       instr__h4948[11:7],
	       7'b1110011 } ;
  assign instr__h4948 =
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5___d242 ?
	       instr_out___1__h8043 :
	       _theResult___fst__h8073 ;
  assign instr__h8173 =
	     { imm12__h8174, 8'd18, instr__h4948[11:7], 7'b0000011 } ;
  assign instr__h8318 =
	     { 4'd0,
	       instr__h4948[8:7],
	       instr__h4948[12],
	       instr__h4948[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h8442,
	       7'b0100011 } ;
  assign instr__h8510 =
	     { imm12__h8511, rs1__h8512, 3'b010, rd__h8513, 7'b0000011 } ;
  assign instr__h8705 =
	     { 5'd0,
	       instr__h4948[5],
	       instr__h4948[12],
	       rd__h8513,
	       rs1__h8512,
	       3'b010,
	       offset_BITS_4_TO_0___h8873,
	       7'b0100011 } ;
  assign instr__h8934 =
	     { SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333[20],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333[10:1],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333[11],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333[19:12],
	       12'd111 } ;
  assign instr__h9277 =
	     { SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333[20],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333[10:1],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333[11],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d333[19:12],
	       12'd239 } ;
  assign instr__h9667 = { 12'd0, instr__h4948[11:7], 15'd103 } ;
  assign instr__h9783 = { 12'd0, instr__h4948[11:7], 15'd231 } ;
  assign instr__h9848 =
	     { SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362[12],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362[10:5],
	       5'd0,
	       rs1__h8512,
	       3'b0,
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362[4:1],
	       SEXT_IF_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PL_ETC___d362[11],
	       7'b1100011 } ;
  assign instr_out___1__h8043 =
	     { near_mem$imem_instr[15:0], imem_rg_instr_15_0 } ;
  assign instr_out___1__h8075 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign instr_out___1__h8103 = { 16'b0, near_mem$imem_instr[31:16] } ;
  assign near_mem_RDY_server_reset_request_put__297_AND_ETC___d1309 =
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N &&
	     f_trace_data$FULL_N ;
  assign near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1248 =
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd10 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 !=
	     4'd11 ;
  assign near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 =
	     near_mem$imem_exc ||
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1374 ;
  assign near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1488 =
	     (near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 &&
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 ||
	      !rg_stop_req && !rg_step_count) &&
	     csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 ;
  assign near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1490 =
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1488 &&
	     (!csr_regfile$interrupt_pending[5] && !csr_regfile$nmi_pending ||
	      near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 &&
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971) ;
  assign near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1496 =
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1490 &&
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd2 ||
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd0) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1494 ;
  assign near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1835 =
	     (near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 &&
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 ||
	      !rg_stop_req && !rg_step_count) &&
	     (!csr_regfile$interrupt_pending[5] && !csr_regfile$nmi_pending ||
	      near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 &&
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971) ;
  assign near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1838 =
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1835 &&
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd2 ||
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd0) &&
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1494 ||
	     !stage1_rg_full ;
  assign near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1883 =
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1402 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 ||
	     !rg_stop_req && !rg_step_count ;
  assign near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 =
	     near_mem$imem_pc[31:2] == imem_rg_pc[31:2] ;
  assign near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d528 =
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5___d242 ||
	     near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 =
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d528 ||
	     near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] != 2'b11 ||
	     near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5___d242 =
	     near_mem$imem_pc == next_pc___1__h17115 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1018 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd0 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1022 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd1 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1026 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd2 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1030 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd3 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1034 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd4 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1038 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd5 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1042 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd6 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1046 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd7 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1050 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd8 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1054 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd9 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1058 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd10 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1062 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd11 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1088 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     NOT_near_mem_imem_exc__44_53_AND_IF_IF_IF_NOT__ETC___d1087 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1093 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	     3'd0 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1097 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	     3'd1 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1101 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	     3'd2 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1105 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 ==
	     3'd3 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1115 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 !=
	     3'd0 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 !=
	     3'd1 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 !=
	     3'd2 &&
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 !=
	     3'd3 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1213 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd0 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1216 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd1 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1219 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd2 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1222 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd3 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1225 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd4 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1228 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd5 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1231 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd6 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1234 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd7 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1237 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd8 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1240 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd9 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1243 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd10 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1246 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) &&
	     IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1015 ==
	     4'd11 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1249 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1248 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1344 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 !=
	      2'd1 ||
	      !IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) &&
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 !=
	      2'd1 ||
	      !IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1349 =
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1344 &&
	     (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1347 ||
	      near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1377 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5___d242 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1371 ||
	      near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1374) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1494 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1347 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1872 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1347 ||
	      near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d530 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d536 &&
	     NOT_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_ETC___d541 &&
	     !near_mem$imem_exc &&
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 ;
  assign next_pc___1__h17115 = imem_rg_pc + 32'd2 ;
  assign next_pc__h17113 = imem_rg_pc + 32'd4 ;
  assign nzimm10__h11049 =
	     { instr__h4948[12],
	       instr__h4948[4:3],
	       instr__h4948[5],
	       instr__h4948[2],
	       instr__h4948[6],
	       4'b0 } ;
  assign nzimm10__h11264 =
	     { instr__h4948[10:7],
	       instr__h4948[12:11],
	       instr__h4948[5],
	       instr__h4948[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h8442 = { instr__h4948[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h8873 =
	     { instr__h4948[11:10], instr__h4948[6], 2'b0 } ;
  assign offset__h7944 =
	     { instr__h4948[3:2],
	       instr__h4948[12],
	       instr__h4948[6:4],
	       2'b0 } ;
  assign offset__h8453 =
	     { instr__h4948[5], instr__h4948[12:10], instr__h4948[6], 2'b0 } ;
  assign offset__h8881 =
	     { instr__h4948[12],
	       instr__h4948[8],
	       instr__h4948[10:9],
	       instr__h4948[6],
	       instr__h4948[7],
	       instr__h4948[2],
	       instr__h4948[11],
	       instr__h4948[5:3],
	       1'b0 } ;
  assign offset__h9792 =
	     { instr__h4948[12],
	       instr__h4948[6:5],
	       instr__h4948[2],
	       instr__h4948[11:10],
	       instr__h4948[4:3],
	       1'b0 } ;
  assign output_stage2___1_bypass_rd_val_data__h7680 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       ((stage2_rg_stage2[430:426] == 5'd0) ?
		  stage2_rg_stage2[361:330] :
		  near_mem$dmem_word64[31:0]) :
	       stage2_rg_stage2[361:330] ;
  assign output_stage2___1_bypass_rd_val_tag_ptr_neg_size__h7731 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       ((stage2_rg_stage2[430:426] == 5'd0) ?
		  stage2_rg_stage2[280:266] :
		  15'h0) :
	       stage2_rg_stage2[280:266] ;
  assign output_stage2___1_bypass_rd_val_tag_ptr_pos_size__h7730 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       ((stage2_rg_stage2[430:426] == 5'd0) ?
		  stage2_rg_stage2[295:281] :
		  15'h0) :
	       stage2_rg_stage2[295:281] ;
  assign rd__h8513 = { 2'b01, instr__h4948[4:2] } ;
  assign rd_val___1__h17549 = x__h21679 + rs2_val_local__h13764 ;
  assign rd_val___1__h17566 = x__h21679 - rs2_val_local__h13764 ;
  assign rd_val___1__h17569 =
	     ((x__h21679 ^ 32'h80000000) <
	      (rs2_val_local__h13764 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h17575 =
	     (x__h21679 < rs2_val_local__h13764) ? 32'd1 : 32'd0 ;
  assign rd_val___1__h17581 = x__h21679 ^ rs2_val_local__h13764 ;
  assign rd_val___1__h17584 = x__h21679 | rs2_val_local__h13764 ;
  assign rd_val__h13725 =
	     (_theResult____h4950[14:12] == 3'b001) ?
	       rd_val__h17440 :
	       _theResult___fst__h17472 ;
  assign rd_val__h13770 =
	     (_theResult____h4950[14:12] == 3'b0 &&
	      (_theResult____h4950[6:0] != 7'b0110011 ||
	       !_theResult____h4950[30])) ?
	       rd_val___1__h17549 :
	       _theResult_____1_fst__h16427 ;
  assign rd_val__h13792 = { _theResult____h4950[31:12], 12'h0 } ;
  assign rd_val__h13812 = imem_rg_pc + rd_val__h13792 ;
  assign rd_val__h17440 = x__h21679 << shamt__h13719 ;
  assign rd_val__h17502 = x__h21679 >> shamt__h13719 ;
  assign rd_val__h17525 =
	     x__h21679 >> shamt__h13719 |
	     ~(32'hFFFFFFFF >> shamt__h13719) & {32{x__h21679[31]}} ;
  assign rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_EQ_0_ETC___d739 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     _theResult____h4950[31:20] == 12'b000100000101 ;
  assign rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_EQ_0_ETC___d740 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	     _theResult____h4950[31:20] == 12'b000100000010 ||
	     rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_EQ_0_ETC___d739 ;
  assign rg_state_8_EQ_4_342_AND_near_mem_imem_exc__44__ETC___d1892 =
	     rg_state == 4'd4 &&
	     near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1883 &&
	     csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1885 &&
	     !stage3_rg_full &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1344 &&
	     (near_mem$imem_exc ||
	      IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949) ;
  assign rg_state_8_EQ_4_342_AND_stage3_rg_full_0_OR_NO_ETC___d1420 =
	     rg_state == 4'd4 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd0 ||
	      stage1_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd3) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd0 ||
	      NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1417) ;
  assign rg_stop_req_379_OR_rg_step_count_380_381_AND_s_ETC___d2158 =
	     (rg_stop_req || rg_step_count) && stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1349 &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd0 ;
  assign rg_stop_req_379_OR_rg_step_count_380_381_AND_s_ETC___d2161 =
	     rg_stop_req_379_OR_rg_step_count_380_381_AND_s_ETC___d2158 &&
	     !stage3_rg_full &&
	     csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 &&
	     !csr_regfile$interrupt_pending[5] &&
	     !csr_regfile$nmi_pending ;
  assign rs1__h8512 = { 2'b01, instr__h4948[9:7] } ;
  assign rs1_val__h26763 =
	     (rg_trap_instr[14:12] == 3'b001) ?
	       rg_csr_val1 :
	       { 27'd0, rg_trap_instr[19:15] } ;
  assign rs1_val_bypassed_tag_ptr_neg_size__h15339 =
	     (_theResult____h4950[19:15] == 5'd0) ?
	       15'd0 :
	       val_tag_ptr_neg_size__h15335 ;
  assign rs1_val_bypassed_tag_ptr_pos_size__h15338 =
	     (_theResult____h4950[19:15] == 5'd0) ?
	       15'd0 :
	       val_tag_ptr_pos_size__h15334 ;
  assign rs2_val__h13530 =
	     (_theResult____h4950[24:20] == 5'd0) ? 32'd0 : val_data__h14975 ;
  assign rs2_val_bypassed_tag_ptr_neg_size__h20982 =
	     (_theResult____h4950[24:20] == 5'd0) ?
	       15'd0 :
	       val_tag_ptr_neg_size__h20978 ;
  assign rs2_val_bypassed_tag_ptr_pos_size__h20981 =
	     (_theResult____h4950[24:20] == 5'd0) ?
	       15'd0 :
	       val_tag_ptr_pos_size__h20977 ;
  assign rs2_val_local__h13764 =
	     (_theResult____h4950[6:0] == 7'b0010011) ?
	       x_3__h15373 :
	       rs2_val__h13530 ;
  assign shamt__h13719 =
	     (_theResult____h4950[6:0] == 7'b0010011) ?
	       _theResult____h4950[24:20] :
	       rs2_val__h13530[4:0] ;
  assign stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526 =
	     stage1_rg_full &&
	     (!near_mem$imem_valid ||
	      NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d255 ||
	      stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d513 ||
	      stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d519) ;
  assign stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1352 =
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1349 &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd0 &&
	     !stage3_rg_full ;
  assign stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1383 =
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1377 &&
	     (rg_stop_req || rg_step_count) ||
	     !csr_regfile_csr_mip_read__353_EQ_rg_prev_mip_354___d1355 ;
  assign stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1389 =
	     stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1383 ||
	     (csr_regfile$interrupt_pending[5] || csr_regfile$nmi_pending) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1377 ;
  assign stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1407 =
	     stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1389 ||
	     IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1405 ||
	     !near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	     imem_rg_pc[1:0] == 2'b0 ||
	     near_mem$imem_instr[17:16] != 2'b11 ;
  assign stage1_rg_full_39_AND_near_mem_imem_valid_AND__ETC___d1876 =
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1872 &&
	     csr_regfile$read_dcsr_step &&
	     !rg_step_count ;
  assign stage2_f_reset_rsps_i_notEmpty__320_AND_stage3_ETC___d1329 =
	     stage2_f_reset_rsps$EMPTY_N && stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     (!rg_run_on_reset ||
	      !near_mem_imem_pc__0_BITS_31_TO_2_1_EQ_imem_rg__ETC___d14 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) ;
  assign stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509 =
	     stage3_rg_stage3[68:64] == _theResult____h4950[19:15] ;
  assign stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515 =
	     stage3_rg_stage3[68:64] == _theResult____h4950[24:20] ;
  assign stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d513 =
	     stage3_rg_stage3[78:72] == 7'b0000011 &&
	     stage3_rg_stage3[86:84] == 3'b111 &&
	     stage3_rg_full &&
	     stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509 ||
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	     2'd1 &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511 ;
  assign stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11_4_A_ETC___d519 =
	     stage3_rg_stage3[78:72] == 7'b0000011 &&
	     stage3_rg_stage3[86:84] == 3'b111 &&
	     stage3_rg_full &&
	     stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515 ||
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	     2'd1 &&
	     IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517 ;
  assign td1_rd__h28910 = { 3'd0, csr_regfile$csr_ret_actions[33:32] } ;
  assign theResult__950_BITS_31_TO_20__q3 = _theResult____h4950[31:20] ;
  assign theResult__950_BITS_31_TO_25_CONCAT_theResult__ETC__q15 =
	     { _theResult____h4950[31:25], _theResult____h4950[11:7] } ;
  assign theResult__950_BIT_31_CONCAT_theResult__950_BI_ETC__q4 =
	     { _theResult____h4950[31],
	       _theResult____h4950[7],
	       _theResult____h4950[30:25],
	       _theResult____h4950[11:8],
	       1'b0 } ;
  assign theResult__950_BIT_31_CONCAT_theResult__950_BI_ETC__q5 =
	     { _theResult____h4950[31],
	       _theResult____h4950[19:12],
	       _theResult____h4950[20],
	       _theResult____h4950[30:21],
	       1'b0 } ;
  assign val_data__h14942 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509) ?
	       stage3_rg_stage3[63:32] :
	       gpr_regfile$read_rs1[63:32] ;
  assign val_data__h14973 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515) ?
	       stage3_rg_stage3[63:32] :
	       gpr_regfile$read_rs2[63:32] ;
  assign val_data__h14975 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ?
	       x_out_bypass_rd_val_data__h7689 :
	       val_data__h14973 ;
  assign val_tag_ptr_neg_size__h15331 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509) ?
	       stage3_rg_stage3[14:0] :
	       gpr_regfile$read_rs1[14:0] ;
  assign val_tag_ptr_neg_size__h15335 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) ?
	       x_out_bypass_rd_val_tag_ptr_neg_size__h7745 :
	       val_tag_ptr_neg_size__h15331 ;
  assign val_tag_ptr_neg_size__h20974 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515) ?
	       stage3_rg_stage3[14:0] :
	       gpr_regfile$read_rs2[14:0] ;
  assign val_tag_ptr_neg_size__h20978 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ?
	       x_out_bypass_rd_val_tag_ptr_neg_size__h7745 :
	       val_tag_ptr_neg_size__h20974 ;
  assign val_tag_ptr_pos_size__h15330 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d509) ?
	       stage3_rg_stage3[29:15] :
	       gpr_regfile$read_rs1[29:15] ;
  assign val_tag_ptr_pos_size__h15334 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d511) ?
	       x_out_bypass_rd_val_tag_ptr_pos_size__h7744 :
	       val_tag_ptr_pos_size__h15330 ;
  assign val_tag_ptr_pos_size__h20973 =
	     ((stage3_rg_stage3[78:72] != 7'b0000011 ||
	       stage3_rg_stage3[86:84] != 3'b111) &&
	      stage3_rg_full &&
	      stage3_rg_stage3[69] &&
	      stage3_rg_stage3_2_BITS_68_TO_64_03_EQ_IF_NOT__ETC___d515) ?
	       stage3_rg_stage3[29:15] :
	       gpr_regfile$read_rs2[29:15] ;
  assign val_tag_ptr_pos_size__h20977 =
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 ==
	      2'd2 &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d517) ?
	       x_out_bypass_rd_val_tag_ptr_pos_size__h7744 :
	       val_tag_ptr_pos_size__h20973 ;
  assign value__h17003 =
	     near_mem$imem_exc ?
	       imem_rg_tval :
	       _theResult_____2_snd_fst_tval__h16959 ;
  assign x_14_ptr_neg_size__h15533 =
	     rs1_val_bypassed_tag_ptr_neg_size__h15339 - x__h15488[14:0] ;
  assign x_14_ptr_neg_size__h21153 =
	     rs1_val_bypassed_tag_ptr_neg_size__h15339 - x__h21108[14:0] ;
  assign x_14_ptr_neg_size__h21328 =
	     rs2_val_bypassed_tag_ptr_neg_size__h20982 - x__h21281[14:0] ;
  assign x_14_ptr_neg_size__h21552 =
	     rs1_val_bypassed_tag_ptr_neg_size__h15339 -
	     rs2_val_local__h13764[14:0] ;
  assign x_14_ptr_neg_size__h21726 =
	     rs2_val_bypassed_tag_ptr_neg_size__h20982 - x__h21679[14:0] ;
  assign x_14_ptr_pos_size__h15532 =
	     rs1_val_bypassed_tag_ptr_pos_size__h15338 + x__h15488[14:0] ;
  assign x_14_ptr_pos_size__h21152 =
	     rs1_val_bypassed_tag_ptr_pos_size__h15338 + x__h21108[14:0] ;
  assign x_14_ptr_pos_size__h21327 =
	     rs2_val_bypassed_tag_ptr_pos_size__h20981 + x__h21281[14:0] ;
  assign x_14_ptr_pos_size__h21551 =
	     rs1_val_bypassed_tag_ptr_pos_size__h15338 +
	     rs2_val_local__h13764[14:0] ;
  assign x_14_ptr_pos_size__h21725 =
	     rs2_val_bypassed_tag_ptr_pos_size__h20981 + x__h21679[14:0] ;
  assign x_3__h15373 =
	     { {20{theResult__950_BITS_31_TO_20__q3[11]}},
	       theResult__950_BITS_31_TO_20__q3 } ;
  assign x_3__h15657 = { 20'd0, _theResult____h4950[31:20] } ;
  assign x_8_ptr_neg_size__h15471 =
	     rs1_val_bypassed_tag_ptr_neg_size__h15339 + x_3__h15373[14:0] ;
  assign x_8_ptr_neg_size__h15741 =
	     rs1_val_bypassed_tag_ptr_neg_size__h15339 +
	     { 3'd0, _theResult____h4950[31:20] } ;
  assign x_8_ptr_neg_size__h21091 =
	     rs1_val_bypassed_tag_ptr_neg_size__h15339 +
	     rs2_val_local__h13764[14:0] ;
  assign x_8_ptr_neg_size__h21264 =
	     rs2_val_bypassed_tag_ptr_neg_size__h20982 + x__h21679[14:0] ;
  assign x_8_ptr_neg_size__h21490 =
	     rs1_val_bypassed_tag_ptr_neg_size__h15339 + x__h21108[14:0] ;
  assign x_8_ptr_neg_size__h21662 =
	     rs2_val_bypassed_tag_ptr_neg_size__h20982 + x__h21281[14:0] ;
  assign x_8_ptr_pos_size__h15470 =
	     rs1_val_bypassed_tag_ptr_pos_size__h15338 - x_3__h15373[14:0] ;
  assign x_8_ptr_pos_size__h15740 =
	     rs1_val_bypassed_tag_ptr_pos_size__h15338 -
	     { 3'd0, _theResult____h4950[31:20] } ;
  assign x_8_ptr_pos_size__h21090 =
	     rs1_val_bypassed_tag_ptr_pos_size__h15338 -
	     rs2_val_local__h13764[14:0] ;
  assign x_8_ptr_pos_size__h21263 =
	     rs2_val_bypassed_tag_ptr_pos_size__h20981 - x__h21679[14:0] ;
  assign x_8_ptr_pos_size__h21489 =
	     rs1_val_bypassed_tag_ptr_pos_size__h15338 - x__h21108[14:0] ;
  assign x_8_ptr_pos_size__h21661 =
	     rs2_val_bypassed_tag_ptr_pos_size__h20981 - x__h21281[14:0] ;
  assign x__h15488 = -x_3__h15373 ;
  assign x__h21108 = -rs2_val_local__h13764 ;
  assign x__h21281 =
	     (_theResult____h4950[19:15] == 5'd0) ?
	       32'd0 :
	       -IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d906 ;
  assign x__h21679 =
	     (_theResult____h4950[19:15] == 5'd0) ?
	       32'd0 :
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d906 ;
  assign x__h26339 = rg_trap_interrupt ? 32'd0 : rg_trap_info[31:0] ;
  assign x__h28034 = (rg_trap_instr[19:15] == 5'd0) ? 32'd0 : 32'd1 ;
  assign x__h28042 =
	     (rg_trap_instr[19:15] == 5'd0) ?
	       32'hAAAAAAAA :
	       csr_regfile$mav_csr_write ;
  assign x__h33241 =
	     csr_regfile_read_csr_mcycle__4_MINUS_rg_start__ETC___d2166[63:0] /
	     _theResult____h33240 ;
  assign x_exc_code__h32989 =
	     (csr_regfile$interrupt_pending[5] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[4:0] :
	       5'd0 ;
  assign x_out_data_to_stage2_instr__h13415 =
	     NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d250 ?
	       instr___1__h7906 :
	       instr__h4948 ;
  assign x_out_data_to_stage2_rd__h13417 =
	     (_theResult____h4950[6:0] == 7'b1100011) ?
	       5'd0 :
	       _theResult____h4950[11:7] ;
  assign x_out_data_to_stage2_trace_data_instr__h23054 =
	     NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_ETC___d250 ?
	       { 16'd0, instr__h4948[15:0] } :
	       _theResult____h4950 ;
  assign x_out_data_to_stage2_val2__h13421 =
	     (_theResult____h4950[6:0] == 7'b1100011) ?
	       branch_target__h13534 :
	       rs2_val__h13530 ;
  assign x_out_next_pc__h13378 =
	     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968 ?
	       data_to_stage2_addr__h13406 :
	       fall_through_pc__h13341 ;
  assign x_out_trap_info_exc_code__h16962 =
	     near_mem$imem_exc ?
	       near_mem$imem_exc_code :
	       _theResult_____2_snd_fst_exc_code__h16958 ;
  assign x_rd__h26171 = { 3'd0, csr_regfile$csr_trap_actions[1:0] } ;
  assign x_word3__h26174 = { 32'd0, rg_trap_info[68:37] } ;
  assign x_word3__h27987 = { 52'd0, rg_trap_instr[31:20] } ;
  assign y__h15441 = { 17'd0, rs1_val_bypassed_tag_ptr_pos_size__h15338 } ;
  assign y__h15489 = { 17'd0, rs1_val_bypassed_tag_ptr_neg_size__h15339 } ;
  assign y__h21234 = { 17'd0, rs2_val_bypassed_tag_ptr_pos_size__h20981 } ;
  assign y__h21282 = { 17'd0, rs2_val_bypassed_tag_ptr_neg_size__h20982 } ;
  assign y__h27877 = ~rs1_val__h27594 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h7232 = stage2_rg_stage2[430:426];
      3'd2: x_out_data_to_stage3_rd__h7232 = 5'd0;
      default: x_out_data_to_stage3_rd__h7232 = stage2_rg_stage2[430:426];
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0: x_out_data_to_stage3_rd_val__h7233 = stage2_rg_stage2[361:330];
      3'd1, 3'd4:
	  x_out_data_to_stage3_rd_val__h7233 = near_mem$dmem_word64[31:0];
      default: x_out_data_to_stage3_rd_val__h7233 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h7611 = stage2_rg_stage2[430:426];
      default: x_out_bypass_rd__h7611 = stage2_rg_stage2[430:426];
    endcase
  end
  always@(rg_trap_instr or rg_csr_val1)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b011: rs1_val__h27594 = rg_csr_val1;
      default: rs1_val__h27594 = { 27'd0, rg_trap_instr[19:15] };
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$word or output_stage2___1_bypass_rd_val_data__h7680)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0: x_out_bypass_rd_val_data__h7689 = stage2_rg_stage2[361:330];
      3'd1, 3'd4:
	  x_out_bypass_rd_val_data__h7689 =
	      output_stage2___1_bypass_rd_val_data__h7680;
      default: x_out_bypass_rd_val_data__h7689 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_bypass_rd_val_tag_ptr_pos_size__h7730)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0:
	  x_out_bypass_rd_val_tag_ptr_pos_size__h7744 =
	      stage2_rg_stage2[295:281];
      3'd1, 3'd4:
	  x_out_bypass_rd_val_tag_ptr_pos_size__h7744 =
	      output_stage2___1_bypass_rd_val_tag_ptr_pos_size__h7730;
      default: x_out_bypass_rd_val_tag_ptr_pos_size__h7744 = 15'd0;
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_bypass_rd_val_tag_ptr_neg_size__h7731)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0:
	  x_out_bypass_rd_val_tag_ptr_neg_size__h7745 =
	      stage2_rg_stage2[280:266];
      3'd1, 3'd4:
	  x_out_bypass_rd_val_tag_ptr_neg_size__h7745 =
	      output_stage2___1_bypass_rd_val_tag_ptr_neg_size__h7731;
      default: x_out_bypass_rd_val_tag_ptr_neg_size__h7745 = 15'd0;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_3_ETC___d142 or
	  IF_near_mem_dmem_valid__36_THEN_IF_near_mem_dm_ETC___d139)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0: CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q1 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q1 =
	      IF_near_mem_dmem_valid__36_THEN_IF_near_mem_dm_ETC___d139;
      default: CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q1 =
		   IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_3_ETC___d142;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[433:431])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d159 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d159 =
		   !stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[433:431])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d168 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d168 =
		   stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_3_ETC___d142 or
	  IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d203)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0: CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q2 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q2 =
	      IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d203;
      3'd2: CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q2 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_433_TO_431_0_2_1_IF_ETC__q2 =
		   IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_3_ETC___d142;
    endcase
  end
  always@(_theResult____h4950)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011,
      7'b0010011,
      7'b0010111,
      7'b0101111,
      7'b0110011,
      7'b0110111,
      7'b1100111,
      7'b1101111:
	  x_out_data_to_stage2_trace_data_rd__h23055 =
	      _theResult____h4950[11:7];
      default: x_out_data_to_stage2_trace_data_rd__h23055 = 5'd2;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q6 = 5'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q6 = 5'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q6 = 5'd11;
    endcase
  end
  always@(_theResult____h4950 or CASE_rg_cur_priv_0b0_8_0b1_9_11__q6)
  begin
    case (_theResult____h4950[31:20])
      12'b0:
	  CASE_theResult__950_BITS_31_TO_20_0b0_CASE_rg__ETC__q7 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q6;
      12'b000000000001:
	  CASE_theResult__950_BITS_31_TO_20_0b0_CASE_rg__ETC__q7 = 5'd3;
      default: CASE_theResult__950_BITS_31_TO_20_0b0_CASE_rg__ETC__q7 = 5'd2;
    endcase
  end
  always@(_theResult____h4950 or alu_outputs___1_exc_code__h14123)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b1100011:
	  alu_outputs_exc_code__h14174 = 5'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h14174 = 5'd0;
      7'b1110011:
	  alu_outputs_exc_code__h14174 = alu_outputs___1_exc_code__h14123;
      default: alu_outputs_exc_code__h14174 = 5'd2;
    endcase
  end
  always@(_theResult____h4950)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_1_0b10011_ETC__q8 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111:
	  CASE_theResult__950_BITS_6_TO_0_0b11_1_0b10011_ETC__q8 = 3'd0;
      7'b0100011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_1_0b10011_ETC__q8 = 3'd2;
      default: CASE_theResult__950_BITS_6_TO_0_0b11_1_0b10011_ETC__q8 = 3'd4;
    endcase
  end
  always@(_theResult____h4950 or
	  CASE_theResult__950_BITS_6_TO_0_0b11_1_0b10011_ETC__q8)
  begin
    case (_theResult____h4950[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 = 3'd0;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 =
		   (_theResult____h4950[6:0] == 7'b0110011 &&
		    _theResult____h4950[31:25] == 7'b0000001) ?
		     3'd3 :
		     CASE_theResult__950_BITS_6_TO_0_0b11_1_0b10011_ETC__q8;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011, 7'b0100011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 =
	      _theResult____h4950[19:15] != 5'd0 &&
	      IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589;
      default: CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 =
		   _theResult____h4950[6:0] == 7'b0101111 &&
		   _theResult____h4950[19:15] != 5'd0 &&
		   IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d620 or
	  IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d669)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011, 7'b0100011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_ne_ETC__q10 =
	      IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d669;
      default: CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_ne_ETC__q10 =
		   _theResult____h4950[6:0] != 7'b0101111 ||
		   _theResult____h4950[19:15] == 5'd0 ||
		   IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d620;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d772 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d748)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d776 =
	      _theResult____h4950[14:12] == 3'b0 ||
	      _theResult____h4950[14:12] == 3'b100 ||
	      _theResult____h4950[14:12] == 3'b001 ||
	      _theResult____h4950[14:12] == 3'b101 ||
	      _theResult____h4950[14:12] == 3'b010 ||
	      _theResult____h4950[14:12] == 3'b111;
      7'b0001111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d776 =
	      _theResult____h4950[14:12] == 3'b001 ||
	      _theResult____h4950[14:12] == 3'b0;
      7'b0100011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d776 =
	      _theResult____h4950[14:12] == 3'b0 ||
	      _theResult____h4950[14:12] == 3'b001 ||
	      _theResult____h4950[14:12] == 3'b010 ||
	      _theResult____h4950[14:12] == 3'b111;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d776 =
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d748;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d776 =
		   IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d772;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d776 or
	  IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d704)
  begin
    case (_theResult____h4950[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__950_BITS_6_TO_0_0b10011_IF_NOT_ETC__q11 =
	      IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d704;
      default: CASE_theResult__950_BITS_6_TO_0_0b10011_IF_NOT_ETC__q11 =
		   _theResult____h4950[6:0] == 7'b0110111 ||
		   _theResult____h4950[6:0] == 7'b0010111 ||
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d776;
    endcase
  end
  always@(_theResult____h4950 or
	  NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d858 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d835)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d862 =
	      _theResult____h4950[14:12] != 3'b0 &&
	      _theResult____h4950[14:12] != 3'b100 &&
	      _theResult____h4950[14:12] != 3'b001 &&
	      _theResult____h4950[14:12] != 3'b101 &&
	      _theResult____h4950[14:12] != 3'b010 &&
	      _theResult____h4950[14:12] != 3'b111;
      7'b0001111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d862 =
	      _theResult____h4950[14:12] != 3'b001 &&
	      _theResult____h4950[14:12] != 3'b0;
      7'b0100011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d862 =
	      _theResult____h4950[14:12] != 3'b0 &&
	      _theResult____h4950[14:12] != 3'b001 &&
	      _theResult____h4950[14:12] != 3'b010 &&
	      _theResult____h4950[14:12] != 3'b111;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d862 =
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d835;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d862 =
		   NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d858;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d862 or
	  NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d795)
  begin
    case (_theResult____h4950[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__950_BITS_6_TO_0_0b10011_NOT_IF_ETC__q12 =
	      NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d795;
      default: CASE_theResult__950_BITS_6_TO_0_0b10011_NOT_IF_ETC__q12 =
		   _theResult____h4950[6:0] != 7'b0110111 &&
		   _theResult____h4950[6:0] != 7'b0010111 &&
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d862;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  _theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d865 or
	  IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d866)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1, 3'd2:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d872 =
	      IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d866;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d872 =
		   _theResult____h4950[6:0] != 7'b1100111 &&
		   (_theResult____h4950[6:0] != 7'b0110011 ||
		    _theResult____h4950[31:25] != 7'b0000001) &&
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d865;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  _theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d779 or
	  NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d875)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1, 3'd2:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d876 =
	      NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d875;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d876 =
		   _theResult____h4950[6:0] == 7'b1100111 ||
		   _theResult____h4950[6:0] == 7'b0110011 &&
		   _theResult____h4950[31:25] == 7'b0000001 ||
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d779;
    endcase
  end
  always@(_theResult____h4950 or
	  NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d858)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q13 =
	      _theResult____h4950[14:12] != 3'b0 &&
	      _theResult____h4950[14:12] != 3'b100 &&
	      _theResult____h4950[14:12] != 3'b001 &&
	      _theResult____h4950[14:12] != 3'b101 &&
	      _theResult____h4950[14:12] != 3'b010 &&
	      _theResult____h4950[14:12] != 3'b111;
      7'b0100011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q13 =
	      _theResult____h4950[14:12] != 3'b0 &&
	      _theResult____h4950[14:12] != 3'b001 &&
	      _theResult____h4950[14:12] != 3'b010 &&
	      _theResult____h4950[14:12] != 3'b111;
      default: CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q13 =
		   NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d858;
    endcase
  end
  always@(_theResult____h4950 or
	  CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q13 or
	  NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d795)
  begin
    case (_theResult____h4950[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__950_BITS_6_TO_0_0b10011_NOT_IF_ETC__q14 =
	      NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d795;
      default: CASE_theResult__950_BITS_6_TO_0_0b10011_NOT_IF_ETC__q14 =
		   _theResult____h4950[6:0] != 7'b0110111 &&
		   _theResult____h4950[6:0] != 7'b0010111 &&
		   CASE_theResult__950_BITS_6_TO_0_0b11_NOT_theRe_ETC__q13;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d885)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1, 3'd2:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d886 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d885;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d886 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d883;
    endcase
  end
  always@(_theResult____h4950 or
	  x__h21679 or
	  alu_outputs___1_trace_data_word3__h22933 or
	  alu_outputs___1_trace_data_word3__h22952)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011:
	  x_out_data_to_stage2_trace_data_word3__h23058 =
	      alu_outputs___1_trace_data_word3__h22933;
      7'b0100011:
	  x_out_data_to_stage2_trace_data_word3__h23058 =
	      alu_outputs___1_trace_data_word3__h22952;
      default: x_out_data_to_stage2_trace_data_word3__h23058 =
		   { 32'd0, x__h21679 };
    endcase
  end
  always@(_theResult____h4950 or
	  _theResult_____1_fst__h16476 or
	  rd_val___1__h17569 or
	  rd_val___1__h17575 or rd_val___1__h17581 or rd_val___1__h17584)
  begin
    case (_theResult____h4950[14:12])
      3'b010: _theResult_____1_fst__h16437 = rd_val___1__h17569;
      3'b011: _theResult_____1_fst__h16437 = rd_val___1__h17575;
      3'b100: _theResult_____1_fst__h16437 = rd_val___1__h17581;
      3'b110: _theResult_____1_fst__h16437 = rd_val___1__h17584;
      default: _theResult_____1_fst__h16437 = _theResult_____1_fst__h16476;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d920 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d916 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d918)
  begin
    case (_theResult____h4950[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 =
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d916;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 =
	      !IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d916;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 =
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d918;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 =
	      !IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d918;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 =
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d920;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 =
		   _theResult____h4950[14:12] == 3'b111 &&
		   !IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d920;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d920 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d916 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d918)
  begin
    case (_theResult____h4950[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d936 =
	      !IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d916;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d936 =
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d916;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d936 =
	      !IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d918;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d936 =
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d918;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d936 =
	      !IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d920;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d936 =
		   _theResult____h4950[14:12] != 3'b111 ||
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d920;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  alu_outputs_exc_code__h14174 or
	  _theResult_____4_snd_fst_exc_code__h16931 or
	  _theResult_____3_snd_fst_exc_code__h16940)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1:
	  _theResult_____3_snd_fst_exc_code__h16943 =
	      _theResult_____4_snd_fst_exc_code__h16931;
      3'd2:
	  _theResult_____3_snd_fst_exc_code__h16943 =
	      _theResult_____3_snd_fst_exc_code__h16940;
      default: _theResult_____3_snd_fst_exc_code__h16943 =
		   alu_outputs_exc_code__h14174;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  alu_outputs_exc_code__h14174 or
	  _theResult_____4_snd_fst_exc_code__h16931 or
	  _theResult_____3_snd_fst_exc_code__h16940 or
	  _theResult_____1_snd_fst_exc_code__h16955)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1:
	  _theResult_____2_snd_fst_exc_code__h16958 =
	      _theResult_____4_snd_fst_exc_code__h16931;
      3'd2:
	  _theResult_____2_snd_fst_exc_code__h16958 =
	      _theResult_____3_snd_fst_exc_code__h16940;
      3'd4:
	  _theResult_____2_snd_fst_exc_code__h16958 =
	      _theResult_____1_snd_fst_exc_code__h16955;
      default: _theResult_____2_snd_fst_exc_code__h16958 =
		   alu_outputs_exc_code__h14174;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d946 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d944 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d941)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d946;
      3'd2:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d944;
      3'd4:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d941;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d949 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930 &&
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d772)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_theResult_ETC__q16 =
	      _theResult____h4950[14:12] == 3'b0 ||
	      _theResult____h4950[14:12] == 3'b100 ||
	      _theResult____h4950[14:12] == 3'b001 ||
	      _theResult____h4950[14:12] == 3'b101 ||
	      _theResult____h4950[14:12] == 3'b010 ||
	      _theResult____h4950[14:12] == 3'b111;
      7'b0100011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_theResult_ETC__q16 =
	      _theResult____h4950[14:12] == 3'b0 ||
	      _theResult____h4950[14:12] == 3'b001 ||
	      _theResult____h4950[14:12] == 3'b010 ||
	      _theResult____h4950[14:12] == 3'b111;
      default: CASE_theResult__950_BITS_6_TO_0_0b11_theResult_ETC__q16 =
		   IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d772;
    endcase
  end
  always@(_theResult____h4950 or
	  CASE_theResult__950_BITS_6_TO_0_0b11_theResult_ETC__q16 or
	  IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d704)
  begin
    case (_theResult____h4950[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__950_BITS_6_TO_0_0b10011_IF_NOT_ETC__q17 =
	      IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d704;
      default: CASE_theResult__950_BITS_6_TO_0_0b10011_IF_NOT_ETC__q17 =
		   _theResult____h4950[6:0] == 7'b0110111 ||
		   _theResult____h4950[6:0] == 7'b0010111 ||
		   CASE_theResult__950_BITS_6_TO_0_0b11_theResult_ETC__q16;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d970)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1, 3'd2, 3'd4:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d970;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d971 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 ||
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968;
    endcase
  end
  always@(_theResult____h4950 or
	  rg_cur_priv or
	  IF_rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_E_ETC___d984)
  begin
    case (_theResult____h4950[31:20])
      12'b0, 12'b000000000001:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d986 = 4'd12;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d986 =
		   (rg_cur_priv == 2'b11 &&
		    _theResult____h4950[31:20] == 12'b001100000010) ?
		     4'd8 :
		     IF_rg_cur_priv_5_EQ_0b11_22_OR_rg_cur_priv_5_E_ETC___d984;
    endcase
  end
  always@(_theResult____h4950)
  begin
    case (_theResult____h4950[14:12])
      3'b0, 3'b001, 3'b010, 3'b100, 3'b101, 3'b111:
	  CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q18 = 4'd1;
      default: CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q18 =
		   4'd12;
    endcase
  end
  always@(_theResult____h4950)
  begin
    case (_theResult____h4950[14:12])
      3'b0: CASE_theResult__950_BITS_14_TO_12_0b0_5_0b1_6_12__q19 = 4'd5;
      3'b001: CASE_theResult__950_BITS_14_TO_12_0b0_5_0b1_6_12__q19 = 4'd6;
      default: CASE_theResult__950_BITS_14_TO_12_0b0_5_0b1_6_12__q19 = 4'd12;
    endcase
  end
  always@(_theResult____h4950)
  begin
    case (_theResult____h4950[14:12])
      3'b0, 3'b001, 3'b010, 3'b111:
	  CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q20 = 4'd1;
      default: CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q20 =
		   4'd12;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d986)
  begin
    case (_theResult____h4950[14:12])
      3'b0:
	  CASE_theResult__950_BITS_14_TO_12_0b0_IF_theRe_ETC__q21 =
	      (_theResult____h4950[11:7] == 5'd0 &&
	       _theResult____h4950[19:15] == 5'd0) ?
		IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d986 :
		4'd12;
      3'b001, 3'b101:
	  CASE_theResult__950_BITS_14_TO_12_0b0_IF_theRe_ETC__q21 = 4'd3;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_theResult__950_BITS_14_TO_12_0b0_IF_theRe_ETC__q21 = 4'd4;
      3'd4: CASE_theResult__950_BITS_14_TO_12_0b0_IF_theRe_ETC__q21 = 4'd12;
    endcase
  end
  always@(_theResult____h4950 or
	  CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q18 or
	  CASE_theResult__950_BITS_14_TO_12_0b0_5_0b1_6_12__q19 or
	  IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d978 or
	  CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q20 or
	  CASE_theResult__950_BITS_14_TO_12_0b0_IF_theRe_ETC__q21)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998 =
	      CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q18;
      7'b0001111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998 =
	      CASE_theResult__950_BITS_14_TO_12_0b0_5_0b1_6_12__q19;
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998 =
	      IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d978;
      7'b0010111, 7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998 = 4'd1;
      7'b0100011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998 =
	      CASE_theResult__950_BITS_14_TO_12_0b0_1_0b1_1__ETC__q20;
      7'b0101111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998 =
	      ((_theResult____h4950[31:27] == 5'b00010 ||
		_theResult____h4950[31:27] == 5'b00011 ||
		_theResult____h4950[31:27] == 5'b0 ||
		_theResult____h4950[31:27] == 5'b00001 ||
		_theResult____h4950[31:27] == 5'b01100 ||
		_theResult____h4950[31:27] == 5'b01000 ||
		_theResult____h4950[31:27] == 5'b00100 ||
		_theResult____h4950[31:27] == 5'b10000 ||
		_theResult____h4950[31:27] == 5'b11000 ||
		_theResult____h4950[31:27] == 5'b10100 ||
		_theResult____h4950[31:27] == 5'b11100) &&
	       _theResult____h4950[14:12] == 3'b010) ?
		4'd1 :
		4'd12;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998 =
	      CASE_theResult__950_BITS_14_TO_12_0b0_IF_theRe_ETC__q21;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998 =
		   4'd12;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927)
  begin
    case (_theResult____h4950[6:0])
      7'b1100011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002 =
	      (_theResult____h4950[14:12] != 3'b0 &&
	       _theResult____h4950[14:12] != 3'b001 &&
	       _theResult____h4950[14:12] != 3'b100 &&
	       _theResult____h4950[14:12] != 3'b101 &&
	       _theResult____h4950[14:12] != 3'b110 &&
	       _theResult____h4950[14:12] != 3'b111) ?
		4'd12 :
		(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d927 ?
		   4'd2 :
		   4'd1);
      7'b1100111, 7'b1101111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002 = 4'd2;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002 =
		   (_theResult____h4950[6:0] == 7'b0110011 &&
		    _theResult____h4950[31:25] == 7'b0000001) ?
		     4'd1 :
		     (((_theResult____h4950[6:0] == 7'b0010011 ||
			_theResult____h4950[6:0] == 7'b0110011) &&
		       (_theResult____h4950[14:12] == 3'b001 ||
			_theResult____h4950[14:12] == 3'b101)) ?
			(_theResult____h4950[25] ? 4'd12 : 4'd1) :
			IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d998);
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1004 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1007)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1008 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1004;
      3'd2:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1008 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1007;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1008 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1004 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1007 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1012)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1013 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1004;
      3'd2:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1013 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1007;
      3'd4:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1013 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1012;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1013 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1002;
    endcase
  end
  always@(_theResult____h4950 or
	  x__h21679 or
	  eaddr__h13838 or
	  eaddr__h13863 or
	  alu_outputs___1_addr__h13561 or
	  alu_outputs___1_addr__h13625 or alu_outputs___1_addr__h13591)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011: x_out_data_to_stage2_addr__h13418 = eaddr__h13838;
      7'b0100011: x_out_data_to_stage2_addr__h13418 = eaddr__h13863;
      7'b1100011:
	  x_out_data_to_stage2_addr__h13418 = alu_outputs___1_addr__h13561;
      7'b1100111:
	  x_out_data_to_stage2_addr__h13418 = alu_outputs___1_addr__h13625;
      7'b1101111:
	  x_out_data_to_stage2_addr__h13418 = alu_outputs___1_addr__h13591;
      default: x_out_data_to_stage2_addr__h13418 = x__h21679;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1134 or
	  alu_outputs___1_addr__h13561 or
	  alu_outputs___1_addr__h13625 or alu_outputs___1_addr__h13591)
  begin
    case (_theResult____h4950[6:0])
      7'b1100011:
	  x_out_data_to_stage2_trace_data_pc__h23052 =
	      alu_outputs___1_addr__h13561;
      7'b1100111:
	  x_out_data_to_stage2_trace_data_pc__h23052 =
	      alu_outputs___1_addr__h13625;
      7'b1101111:
	  x_out_data_to_stage2_trace_data_pc__h23052 =
	      alu_outputs___1_addr__h13591;
      default: x_out_data_to_stage2_trace_data_pc__h23052 =
		   IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1134;
    endcase
  end
  always@(_theResult____h4950 or imem_rg_pc or data_to_stage2_addr__h13406)
  begin
    case (_theResult____h4950[6:0])
      7'b1100111, 7'b1101111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1292 =
	      data_to_stage2_addr__h13406;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1292 =
		   (_theResult____h4950[6:0] == 7'b1110011 &&
		    _theResult____h4950[14:12] == 3'b0 &&
		    _theResult____h4950[11:7] == 5'd0 &&
		    _theResult____h4950[19:15] == 5'd0 &&
		    _theResult____h4950[31:20] == 12'b000000000001) ?
		     imem_rg_pc :
		     32'd0;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1346)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1, 3'd2, 3'd4:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1347 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1346;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1347 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 ||
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1373)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1, 3'd2, 3'd4:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1374 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d1373;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1374 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d930 &&
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d939;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968 or
	  IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d970)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1, 3'd2, 3'd4:
	  IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1371 =
	      IF_csr_regfile_read_tag_ctrl_BIT_0_AND_NOT_IF__ETC___d970;
      default: IF_IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_ETC___d1371 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d966 ||
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d968;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[433:431])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_433_TO_431_1_near_m_ETC__q22 =
	      near_mem$dmem_word64[31:0];
      default: CASE_stage2_rg_stage2_BITS_433_TO_431_1_near_m_ETC__q22 =
		   stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_15_BITS_448_TO_446_439_EQ__ETC___d1449)
  begin
    case (stage2_rg_stage2[433:431])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_433_TO_431_1_IF_sta_ETC__q23 =
	      IF_stage2_rg_stage2_15_BITS_448_TO_446_439_EQ__ETC___d1449;
      default: CASE_stage2_rg_stage2_BITS_433_TO_431_1_IF_sta_ETC__q23 =
		   30'd0;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$word or output_stage2___1_bypass_rd_val_data__h7680)
  begin
    case (stage2_rg_stage2[433:431])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_433_TO_431_1_output_ETC__q24 =
	      output_stage2___1_bypass_rd_val_data__h7680;
      default: CASE_stage2_rg_stage2_BITS_433_TO_431_1_output_ETC__q24 =
		   stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d231)
  begin
    case (stage2_rg_stage2[433:431])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_433_TO_431_1_IF_NOT_ETC__q25 =
	      IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d231;
      default: CASE_stage2_rg_stage2_BITS_433_TO_431_1_IF_NOT_ETC__q25 =
		   30'd0;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500 or
	  NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1522)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011, 7'b0100011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_NOT_IF_NO_ETC__q26 =
	      NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1522;
      default: CASE_theResult__950_BITS_6_TO_0_0b11_NOT_IF_NO_ETC__q26 =
		   _theResult____h4950[6:0] == 7'b0101111 &&
		   _theResult____h4950[19:15] != 5'd0 &&
		   IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d231)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0:
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1531 =
	      stage2_rg_stage2[295:266];
      3'd1, 3'd4:
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1531 =
	      IF_NOT_near_mem_dmem_valid__36_55_OR_NOT_near__ETC___d231;
      default: IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d1531 =
		   30'd0;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 or
	  IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567 or
	  NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1579 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1586)
  begin
    case (_theResult____h4950[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1593 =
	      NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_ETC___d1579 ?
		IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 :
		IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1586;
      3'b010, 3'b011, 3'b100, 3'b110:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1593 =
	      _theResult____h4950[19:15] != 5'd0 &&
	      IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 ||
	      _theResult____h4950[24:20] != 5'd0 &&
	      IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1593 =
		   _theResult____h4950[14:12] == 3'b111 &&
		   (_theResult____h4950[19:15] != 5'd0 &&
		    IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d589 ||
		    _theResult____h4950[24:20] != 5'd0 &&
		    IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1567);
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1741)
  begin
    case (_theResult____h4950[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__950_BITS_6_TO_0_0b10011_IF_IF__ETC__q27 =
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1741;
      default: CASE_theResult__950_BITS_6_TO_0_0b10011_IF_IF__ETC__q27 =
		   30'd0;
    endcase
  end
  always@(_theResult____h4950 or
	  alu_outputs___1_val1__h14154 or
	  rd_val__h13770 or
	  rd_val__h13812 or rd_val__h13792 or alu_outputs___1_val1__h14128)
  begin
    case (_theResult____h4950[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1199 =
	      rd_val__h13770;
      7'b0010111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1199 =
	      rd_val__h13812;
      7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1199 =
	      rd_val__h13792;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1199 =
	      alu_outputs___1_val1__h14128;
      default: IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1199 =
		   alu_outputs___1_val1__h14154;
    endcase
  end
  always@(_theResult____h4950 or
	  rd_val__h13812 or rd_val__h13770 or rd_val__h13792)
  begin
    case (_theResult____h4950[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__950_BITS_6_TO_0_0b10011_rd_val_ETC__q28 =
	      rd_val__h13770;
      7'b0110111:
	  CASE_theResult__950_BITS_6_TO_0_0b10011_rd_val_ETC__q28 =
	      rd_val__h13792;
      default: CASE_theResult__950_BITS_6_TO_0_0b10011_rd_val_ETC__q28 =
		   rd_val__h13812;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1778 or
	  IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1134)
  begin
    case (_theResult____h4950[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_trace_data_word1__h23056 =
	      IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1134;
      default: x_out_data_to_stage2_trace_data_word1__h23056 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1778;
    endcase
  end
  always@(_theResult____h4950 or
	  x__h21679 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1200 or
	  IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1134)
  begin
    case (_theResult____h4950[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h13420 =
	      IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLU_ETC___d1134;
      default: x_out_data_to_stage2_val1__h13420 =
		   (_theResult____h4950[6:0] == 7'b0110011 &&
		    _theResult____h4950[31:25] == 7'b0000001) ?
		     x__h21679 :
		     IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1200;
    endcase
  end
  always@(_theResult____h4950)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011:
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 = 4'd8;
      7'b0001111, 7'b1100011, 7'b1110011:
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 = 4'd5;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111, 7'b1100111, 7'b1101111:
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 = 4'd6;
      7'b0100011:
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 = 4'd10;
      7'b0101111:
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 = 4'd11;
      default: IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 =
		   4'd12;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693)
  begin
    case (_theResult____h4950[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_theResult__950_BITS_6_TO_0_0b1100011_0_0b_ETC__q29 = 30'd0;
      default: CASE_theResult__950_BITS_6_TO_0_0b1100011_0_0b_ETC__q29 =
		   (_theResult____h4950[6:0] == 7'b0110011 &&
		    _theResult____h4950[31:25] == 7'b0000001) ?
		     ((_theResult____h4950[24:20] == 5'd0) ?
			30'd0 :
			IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1693) :
		     30'd0;
    endcase
  end
  always@(IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 or
	  x_out_data_to_stage2_val2__h13421 or
	  _theResult_____1_fst_val2__h24432)
  begin
    case (IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573)
      3'd1: x__h24490 = x_out_data_to_stage2_val2__h13421;
      3'd2: x__h24490 = _theResult_____1_fst_val2__h24432;
      default: x__h24490 = x_out_data_to_stage2_val2__h13421;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1744)
  begin
    case (_theResult____h4950[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_theResult__950_BITS_6_TO_0_0b1100011_0_0b_ETC__q30 = 30'd0;
      default: CASE_theResult__950_BITS_6_TO_0_0b1100011_0_0b_ETC__q30 =
		   IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1744;
    endcase
  end
  always@(_theResult____h4950 or
	  IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1555 or
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1556 or
	  IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500 or
	  IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1547)
  begin
    case (_theResult____h4950[6:0])
      7'b0000011, 7'b0100011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_IF_ETC__q31 =
	      IF_NOT_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_p_ETC___d1555;
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0110011,
      7'b0110111,
      7'b1100011,
      7'b1101111,
      7'b1110011:
	  CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_IF_ETC__q31 = 30'd0;
      7'b0101111:
	  CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_IF_ETC__q31 =
	      IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d1556;
      7'b1100111:
	  CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_IF_ETC__q31 =
	      (_theResult____h4950[19:15] != 5'd0 &&
	       IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_stag_ETC___d1500) ?
		IF_IF_IF_stage2_rg_full_14_THEN_IF_stage2_rg_s_ETC___d1547 :
		30'd0;
      default: CASE_theResult__950_BITS_6_TO_0_0b11_IF_NOT_IF_ETC__q31 =
		   30'd0;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[433:431])
      3'd0, 3'd2:
	  CASE_stage2_rg_stage2_BITS_433_TO_431_0_stage2_ETC__q32 =
	      stage2_rg_stage2[159:128];
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_433_TO_431_0_stage2_ETC__q32 =
	      near_mem$dmem_word64[31:0];
      default: CASE_stage2_rg_stage2_BITS_433_TO_431_0_stage2_ETC__q32 =
		   stage2_mbox$word;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd2;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_prev_mip <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_step_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stop_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tagger_tp_m1_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_prev_mip$EN)
	  rg_prev_mip <= `BSV_ASSIGNMENT_DELAY rg_prev_mip$D_IN;
	if (rg_run_on_reset$EN)
	  rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY rg_run_on_reset$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_step_count$EN)
	  rg_step_count <= `BSV_ASSIGNMENT_DELAY rg_step_count$D_IN;
	if (rg_stop_req$EN)
	  rg_stop_req <= `BSV_ASSIGNMENT_DELAY rg_stop_req$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
	if (tagger_tp_m1_initialized$EN)
	  tagger_tp_m1_initialized <= `BSV_ASSIGNMENT_DELAY
	      tagger_tp_m1_initialized$D_IN;
      end
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_instr_15_0$EN)
      imem_rg_instr_15_0 <= `BSV_ASSIGNMENT_DELAY imem_rg_instr_15_0$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (imem_rg_tval$EN)
      imem_rg_tval <= `BSV_ASSIGNMENT_DELAY imem_rg_tval$D_IN;
    if (rg_csr_pc$EN) rg_csr_pc <= `BSV_ASSIGNMENT_DELAY rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= `BSV_ASSIGNMENT_DELAY rg_csr_val1$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
    if (rg_trap_instr$EN)
      rg_trap_instr <= `BSV_ASSIGNMENT_DELAY rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN)
      rg_trap_interrupt <= `BSV_ASSIGNMENT_DELAY rg_trap_interrupt$D_IN;
    if (rg_trap_trace_data$EN)
      rg_trap_trace_data <= `BSV_ASSIGNMENT_DELAY rg_trap_trace_data$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_f3 = 3'h2;
    imem_rg_instr_15_0 = 16'hAAAA;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 32'hAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 32'hAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    imem_rg_tval = 32'hAAAAAAAA;
    rg_csr_pc = 32'hAAAAAAAA;
    rg_csr_val1 = 32'hAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 32'hAAAAAAAA;
    rg_prev_mip = 32'hAAAAAAAA;
    rg_run_on_reset = 1'h0;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_step_count = 1'h0;
    rg_stop_req = 1'h0;
    rg_trap_info = 69'h0AAAAAAAAAAAAAAAAA;
    rg_trap_instr = 32'hAAAAAAAA;
    rg_trap_interrupt = 1'h0;
    rg_trap_trace_data =
	234'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage1_rg_full = 1'h0;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 =
	500'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 136'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    tagger_tp_m1_initialized = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", 2'd0, 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11__ETC___d101)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  !IF_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11__ETC___d101)
	$write("Rd %0d ", stage3_rg_stage3[68:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11__ETC___d101)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11__ETC___d105 &&
	  stage3_rg_stage3[78:72] == 7'b0000011 &&
	  stage3_rg_stage3[86:84] == 3'b111 &&
	  stage3_rg_full)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage3_rg_stage3_2_BITS_78_TO_72_3_EQ_0b11__ETC___d105 &&
	  (stage3_rg_stage3[78:72] != 7'b0000011 ||
	   stage3_rg_stage3[86:84] != 3'b111 ||
	   !stage3_rg_full))
	$write("rd_val:%h", stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[497:466],
		 stage2_rg_stage2[465:434],
		 stage2_rg_stage2[499:498]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[497:466]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[497:466],
	       stage2_rg_stage2[465:434],
	       stage2_rg_stage2[499:498]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3 &&
	  stage2_rg_stage2[433:431] != 3'd0 &&
	  IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d159)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3 &&
	  (stage2_rg_stage2[433:431] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d168))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7232,
	       x_out_data_to_stage3_rd_val__h7233);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", stage2_rg_stage2[497:466]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", stage2_rg_stage2[425:394], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", stage2_rg_stage2[497:466]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", stage2_rg_stage2[425:394], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h7611);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 != 2'd0 &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d207 != 2'd1)
	$write("rd_val:%h",
	       (stage2_rg_stage2[433:431] == 3'd0) ?
		 { stage2_rg_stage2[361:330], stage2_rg_stage2[297:266] } :
		 IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d236);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13415,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("Output_Stage1", " BUSY pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("Output_Stage1", " NONPIPE: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1018)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1022)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1026)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1030)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1034)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1038)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1042)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1046)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1050)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1054)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1058)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1062)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1088)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h13415,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1093)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1097)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1101)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1105)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1115)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h13417);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h13418,
	       x_out_data_to_stage2_val1__h13420,
	       x_out_data_to_stage2_val2__h13421);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1213)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1216)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1219)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1222)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1225)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1228)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1231)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1234)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1237)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1240)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1243)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1246)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d1249)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("'h%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("'h%h", x_out_trap_info_exc_code__h16962);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d951)
	$write("'h%h", value__h17003, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc__0_EQ_ETC___d973)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_39_AND_NOT_near_mem_imem_valid__ETC___d526)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_mip_cmd &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_mip_cmd: MIP new 0x%0h, old 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_mip_read,
		 rg_prev_mip);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h3467 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13415,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_run_redundant",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run_redundant)
	$display("%0d: %m.debug_run_redundant: CPU already running.",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_halt_redundant",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant)
	$display("%0d: %m.rl_debug_halt_redundant: CPU already halted.",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant) $write("    state = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd0)
	$write("CPU_RESET1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd1)
	$write("CPU_RESET2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd2)
	$write("CPU_GDB_PAUSING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd3)
	$write("CPU_DEBUG_MODE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd4)
	$write("CPU_RUNNING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd5)
	$write("CPU_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd6)
	$write("CPU_START_TRAP_HANDLER");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd7)
	$write("CPU_CSRRW_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd8)
	$write("CPU_CSRR_S_or_C_2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd9)
	$write("CPU_CSRRX_RESTART");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd10)
	$write("CPU_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd11)
	$write("CPU_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state == 4'd12)
	$write("CPU_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant && rg_state != 4'd0 &&
	  rg_state != 4'd1 &&
	  rg_state != 4'd2 &&
	  rg_state != 4'd3 &&
	  rg_state != 4'd4 &&
	  rg_state != 4'd5 &&
	  rg_state != 4'd6 &&
	  rg_state != 4'd7 &&
	  rg_state != 4'd8 &&
	  rg_state != 4'd9 &&
	  rg_state != 4'd10 &&
	  rg_state != 4'd11 &&
	  rg_state != 4'd12)
	$write("CPU_WFI_PAUSED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt_redundant) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_read_gpr: reg %0d => 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_gpr_reqs$D_OUT[36:32],
		 gpr_regfile$read_rs1_port2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_gpr &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_write_gpr: reg %0d <= 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_gpr_reqs$D_OUT[36:32],
		 f_gpr_reqs$D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_gpr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_gpr_access_busy",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_read_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_read_csr: csr %0d => 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_csr_reqs$D_OUT[43:32],
		 csr_regfile$read_csr_port2[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_run", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage1.enq: 0x%08h", csr_regfile$read_dpc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run)
	$display("%0d: %m.rl_debug_run: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_dpc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_run &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_run: 'run' from dpc 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_dpc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_csr_access_busy &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_csr_access_busy",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap)
	$write("%0d: %m.rl_stage1_trap: ", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("trap_info:  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("'h%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap)
	$write("'h%h", x_out_trap_info_exc_code__h16962);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("'h%h", value__h17003, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("instr:      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap)
	$write("'h%h", x_out_data_to_stage2_instr__h13415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("trace_data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("Trace_Data{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write("Trace_Data{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd3)
	$write("Trace_Data{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd4)
	$write("Trace_Data{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd4)
	$write("Trace_Data{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd4)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd5)
	$write("TRACE_OTHER");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd6)
	$write("TRACE_I_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd7)
	$write("TRACE_F_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd8)
	$write("TRACE_I_LOAD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd9)
	$write("TRACE_F_LOAD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd10)
	$write("TRACE_STORE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd11)
	$write("TRACE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd12)
	$write("TRACE_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd13)
	$write("TRACE_RET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd14)
	$write("TRACE_CSRRX");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd4 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd5 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd6 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd7 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd8 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd9 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd10 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd11 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd12 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd13 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd14)
	$write("TRACE_INTR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd4)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd4)
	$write(" pc %0h", x_out_data_to_stage2_trace_data_pc__h23052);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd4)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd15)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd4 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd15)
	$write(" instr.%0d %0h:",
	       near_mem_imem_pc__0_EQ_imem_rg_pc_2_PLUS_2_5_4_ETC___d528,
	       x_out_data_to_stage2_trace_data_instr__h23054);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd4)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd4 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd6 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd7))
	$write(" rd %0d  rdval %0h",
	       x_out_data_to_stage2_trace_data_rd__h23055,
	       x_out_data_to_stage2_trace_data_word1__h23056);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd4 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd6 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd7 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd8 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd9))
	$write(" rd %0d  rdval %0h  eaddr %0h",
	       x_out_data_to_stage2_trace_data_rd__h23055,
	       x_out_data_to_stage2_trace_data_word1__h23056,
	       x_out_data_to_stage2_trace_data_word3__h23058);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd10)
	$write(" stval %0h  eaddr %0h",
	       rs2_val__h13530,
	       x_out_data_to_stage2_trace_data_word3__h23058);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd11)
	$write(" rd %0d  rdval %0h  stval %0h  eaddr %0h",
	       x_out_data_to_stage2_trace_data_rd__h23055,
	       x_out_data_to_stage2_trace_data_word1__h23056,
	       rs2_val__h13530,
	       x_out_data_to_stage2_trace_data_word3__h23058);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd14)
	$write(" rd %0d  rdval %0h  csraddr %0h  csrval %0h",
	       x_out_data_to_stage2_trace_data_rd__h23055,
	       x_out_data_to_stage2_trace_data_word1__h23056,
	       x_out_data_to_stage2_trace_data_word3__h23058,
	       32'hAAAAAAAA);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd4 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd6 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd7 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd8 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd9 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd10 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd11 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd14 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd12 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd15))
	$write(" priv %0d  mstatus %0h  mcause %0h  mepc %0h  mtval %0h",
	       x_out_data_to_stage2_trace_data_rd__h23055,
	       x_out_data_to_stage2_trace_data_word1__h23056,
	       rs2_val__h13530,
	       x_out_data_to_stage2_trace_data_word3__h23058,
	       32'hAAAAAAAA);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd13)
	$write(" priv %0d  mstatus %0h",
	       x_out_data_to_stage2_trace_data_rd__h23055,
	       x_out_data_to_stage2_trace_data_word1__h23056);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd4 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd6 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd7 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd8 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd9 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd10 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd11 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd14 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd12 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd15 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd13)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd4)
	$write("TRACE_MEM_WRITE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd4)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd4)
	$write(" sz %0d  stval %0h  paddr %0h",
	       x_out_data_to_stage2_trace_data_word1__h23056,
	       rs2_val__h13530,
	       x_out_data_to_stage2_trace_data_word3__h23058);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd3 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd4)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd3)
	$write("TRACE_CSR_WRITE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd3)
	$write(" csraddr %0h  csrval %0h",
	       x_out_data_to_stage2_trace_data_word3__h23058,
	       32'hAAAAAAAA);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd2 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd1)
	$write("TRACE_GPR_WRITE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd2)
	$write("TRACE_FPR_WRITE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  (IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd1 ||
	   IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 ==
	   4'd2))
	$write(" rd %0d  rdval %0h",
	       x_out_data_to_stage2_trace_data_rd__h23055,
	       x_out_data_to_stage2_trace_data_word1__h23056);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd0 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 !=
	  4'd1 &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 == 4'd0)
	$write("TRACE_RESET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_39_40_OR_NOT_near_mem_im_ETC___d1761 != 4'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3467 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13415,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3467 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[65:34],
		 csr_regfile$csr_ret_actions[31:0],
		 csr_regfile$csr_ret_actions[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h3467 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13415,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h3467 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13415,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h3467 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13415,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
	$display("%0d: %m.rl_trap_BREAK_to_Debug_Mode",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode)
	$display("%0d: %m.rl_trap_BREAK_to_Debug_Mode: PC 0x%08h instr 0x%08h",
		 csr_regfile$read_csr_mcycle,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_BREAK_to_Debug_Mode &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    Flushing caches");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_BREAK_cache_flush_finish &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_BREAK_cache_flush_finish",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_stop", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && rg_stop_req)
	$display("%0d: %m.rl_stage1_stop: Stop for debugger. minstret %0d priv %0d PC 0x%0h instr 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && rg_stop_req)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h33242,
		 cpifrac__h33243,
		 delta_CPI_cycles__h33238,
		 _theResult____h33240);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_stop && !rg_stop_req)
	$display("%0d: %m.rl_stage1_stop: Stop after single-step. PC = 0x%08h",
		 csr_regfile$read_csr_mcycle,
		 imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (csr_regfile$read_tag_ctrl[0]) $display("tag active");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_write_csr &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_write_csr: csr 0x%0h 0x%0h <= 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 f_csr_reqs$D_OUT[43:32],
		 f_csr_reqs$D_OUT[31:0],
		 csr_regfile$mav_csr_write);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagger_tp_m1_rl_startup)
	$display("SizedPointerPolicy XLEN=%d sizeof(ptr_pos_size)=%d",
		 $signed(32'd32),
		 $signed(32'd15));
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      $display("ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False");
    if (WILL_FIRE_RL_imem_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage1.enq: 0x%08h",
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: entering DEBUG_MODE",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[69] &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[68:64],
		 stage3_rg_stage3[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[497:466],
	       stage2_rg_stage2[465:434],
	       stage2_rg_stage2[499:498]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47 &&
	  stage2_rg_stage2[433:431] != 3'd0 &&
	  IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d159)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47 &&
	  (stage2_rg_stage2[433:431] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_433_TO_431_16_EQ_1_ETC___d168))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7232,
	       x_out_data_to_stage3_rd_val__h7233);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  cur_verbosity__h3467 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[497:466],
		 stage2_rg_stage2[465:434],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1496 &&
	  IF_IF_NOT_near_mem_imem_pc__0_EQ_imem_rg_pc_2__ETC___d573 == 3'd1 &&
	  x_out_data_to_stage2_instr__h13415[14:12] == 3'b111)
	$display("CPU_Stage2 LD tag %h", x_out_data_to_stage2_instr__h13415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  near_mem_imem_exc__44_OR_IF_IF_IF_NOT_near_mem_ETC___d1496 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage2.enq (Data_Stage1_to_Stage2)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_stage1_rg_full_39_40_OR_NOT_near_mem_imem__ETC___d1839 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h13378);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_halt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_debug_halt &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_debug_halt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3467 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_trap_info[68:37],
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3467 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[33:2],
		 rg_trap_info[68:37],
		 rg_trap_info[31:0],
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h3467 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h26763,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h26763,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C_2",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h3467 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h27594,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    rl_stage1_CSRR_S_or_C: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h27594,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h13378);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: rl_stage1_restart_after_csrrx: minstret:%0d  pc:%0x  cur_priv:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 x_out_next_pc__h13378,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_finish_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cur_verbosity__h3467 != 4'd0)
	$display("    WFI resume");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_Debug_Module)
	$display("%0d: %m.rl_reset_from_Debug_Module",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d47)
	$display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2019 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h3467 != 4'd0)
	$display("%0d: %m.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

