//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Mon Feb 17 21:01:02 EST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// m_num_pmp_regions              O     5 const
// permitted                      O     1 const
// RDY_permitted                  O     1 const
// pmp_csrs_pmpcfg_read           O    32 const
// RDY_pmp_csrs_pmpcfg_read       O     1 const
// pmp_csrs_pmpcfg_write          O    32 const
// RDY_pmp_csrs_pmpcfg_write      O     1 const
// pmp_csrs_pmpaddr_read          O    32 const
// RDY_pmp_csrs_pmpaddr_read      O     1 const
// pmp_csrs_pmpaddr_write         O    32 const
// RDY_pmp_csrs_pmpaddr_write     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// permitted_phys_addr            I    32 unused
// permitted_req_size             I     2 unused
// permitted_priv                 I     2 unused
// permitted_rwx                  I     2 unused
// pmp_csrs_pmpcfg_read_j         I     2 unused
// pmp_csrs_pmpcfg_write_j        I     2 unused
// pmp_csrs_pmpcfg_write_x        I    32 unused
// pmp_csrs_pmpaddr_read_j        I     4 unused
// pmp_csrs_pmpaddr_write_j       I     4 unused
// pmp_csrs_pmpaddr_write_addr    I    32 unused
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_permitted                   I     1 unused
// EN_pmp_csrs_pmpcfg_write       I     1 unused
// EN_pmp_csrs_pmpaddr_write      I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPMPU(CLK,
	      RST_N,

	      EN_server_reset_request_put,
	      RDY_server_reset_request_put,

	      EN_server_reset_response_get,
	      RDY_server_reset_response_get,

	      m_num_pmp_regions,

	      permitted_phys_addr,
	      permitted_req_size,
	      permitted_priv,
	      permitted_rwx,
	      EN_permitted,
	      permitted,
	      RDY_permitted,

	      pmp_csrs_pmpcfg_read_j,
	      pmp_csrs_pmpcfg_read,
	      RDY_pmp_csrs_pmpcfg_read,

	      pmp_csrs_pmpcfg_write_j,
	      pmp_csrs_pmpcfg_write_x,
	      EN_pmp_csrs_pmpcfg_write,
	      pmp_csrs_pmpcfg_write,
	      RDY_pmp_csrs_pmpcfg_write,

	      pmp_csrs_pmpaddr_read_j,
	      pmp_csrs_pmpaddr_read,
	      RDY_pmp_csrs_pmpaddr_read,

	      pmp_csrs_pmpaddr_write_j,
	      pmp_csrs_pmpaddr_write_addr,
	      EN_pmp_csrs_pmpaddr_write,
	      pmp_csrs_pmpaddr_write,
	      RDY_pmp_csrs_pmpaddr_write);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method m_num_pmp_regions
  output [4 : 0] m_num_pmp_regions;

  // actionvalue method permitted
  input  [31 : 0] permitted_phys_addr;
  input  [1 : 0] permitted_req_size;
  input  [1 : 0] permitted_priv;
  input  [1 : 0] permitted_rwx;
  input  EN_permitted;
  output permitted;
  output RDY_permitted;

  // value method pmp_csrs_pmpcfg_read
  input  [1 : 0] pmp_csrs_pmpcfg_read_j;
  output [31 : 0] pmp_csrs_pmpcfg_read;
  output RDY_pmp_csrs_pmpcfg_read;

  // actionvalue method pmp_csrs_pmpcfg_write
  input  [1 : 0] pmp_csrs_pmpcfg_write_j;
  input  [31 : 0] pmp_csrs_pmpcfg_write_x;
  input  EN_pmp_csrs_pmpcfg_write;
  output [31 : 0] pmp_csrs_pmpcfg_write;
  output RDY_pmp_csrs_pmpcfg_write;

  // value method pmp_csrs_pmpaddr_read
  input  [3 : 0] pmp_csrs_pmpaddr_read_j;
  output [31 : 0] pmp_csrs_pmpaddr_read;
  output RDY_pmp_csrs_pmpaddr_read;

  // actionvalue method pmp_csrs_pmpaddr_write
  input  [3 : 0] pmp_csrs_pmpaddr_write_j;
  input  [31 : 0] pmp_csrs_pmpaddr_write_addr;
  input  EN_pmp_csrs_pmpaddr_write;
  output [31 : 0] pmp_csrs_pmpaddr_write;
  output RDY_pmp_csrs_pmpaddr_write;

  // signals for module outputs
  wire [31 : 0] pmp_csrs_pmpaddr_read,
		pmp_csrs_pmpaddr_write,
		pmp_csrs_pmpcfg_read,
		pmp_csrs_pmpcfg_write;
  wire [4 : 0] m_num_pmp_regions;
  wire RDY_permitted,
       RDY_pmp_csrs_pmpaddr_read,
       RDY_pmp_csrs_pmpaddr_write,
       RDY_pmp_csrs_pmpcfg_read,
       RDY_pmp_csrs_pmpcfg_write,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       permitted;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_reset,
       CAN_FIRE_permitted,
       CAN_FIRE_pmp_csrs_pmpaddr_write,
       CAN_FIRE_pmp_csrs_pmpcfg_write,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_permitted,
       WILL_FIRE_pmp_csrs_pmpaddr_write,
       WILL_FIRE_pmp_csrs_pmpcfg_write,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get;

  // remaining internal signals
  reg [31 : 0] v__h305, v__h311;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method m_num_pmp_regions
  assign m_num_pmp_regions = 5'd0 ;

  // actionvalue method permitted
  assign permitted = 1'd1 ;
  assign RDY_permitted = 1'd1 ;
  assign CAN_FIRE_permitted = 1'd1 ;
  assign WILL_FIRE_permitted = EN_permitted ;

  // value method pmp_csrs_pmpcfg_read
  assign pmp_csrs_pmpcfg_read = 32'd0 ;
  assign RDY_pmp_csrs_pmpcfg_read = 1'd1 ;

  // actionvalue method pmp_csrs_pmpcfg_write
  assign pmp_csrs_pmpcfg_write = 32'd0 ;
  assign RDY_pmp_csrs_pmpcfg_write = 1'd1 ;
  assign CAN_FIRE_pmp_csrs_pmpcfg_write = 1'd1 ;
  assign WILL_FIRE_pmp_csrs_pmpcfg_write = EN_pmp_csrs_pmpcfg_write ;

  // value method pmp_csrs_pmpaddr_read
  assign pmp_csrs_pmpaddr_read = 32'd0 ;
  assign RDY_pmp_csrs_pmpaddr_read = 1'd1 ;

  // actionvalue method pmp_csrs_pmpaddr_write
  assign pmp_csrs_pmpaddr_write = 32'd0 ;
  assign RDY_pmp_csrs_pmpaddr_write = 1'd1 ;
  assign CAN_FIRE_pmp_csrs_pmpaddr_write = 1'd1 ;
  assign WILL_FIRE_pmp_csrs_pmpaddr_write = EN_pmp_csrs_pmpaddr_write ;

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = CAN_FIRE_RL_rl_reset ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = CAN_FIRE_RL_rl_reset ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset)
	begin
	  v__h311 = $stime;
	  #0;
	end
    v__h305 = v__h311 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset)
	$display("%0d: %m: Null PMPU (no regions, no PMP checks)", v__h305);
  end
  // synopsys translate_on
endmodule  // mkPMPU

